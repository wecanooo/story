{"version":3,"sources":["webpack:///path---react-에서-mobx-이용하기-i-dfd5fd73d181f94a7d0d.js","webpack:///./.cache/json/react-에서-mobx-이용하기-i.json"],"names":["webpackJsonp","500","module","exports","data","markdownRemark","html","timeToRead","excerpt","frontmatter","title","cover","date","category","tags","author","fields","slug","prev","next","authors","edges","node","id","name","image","url","bio","pathContext","total"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,iueAA0mfC,WAAA,EAAAC,QAAA,kHAAAC,aAA0WC,MAAA,uBAAAC,MAAA,sGAAAC,KAAA,2BAAAC,SAAA,OAAAC,MAAA,6BAAAC,OAAA,YAA0PC,QAAWC,KAAA,0BAAgCC,MAASV,QAAA,qGAAAC,aAA8HC,MAAA,qCAAAC,MAAA,sGAAAC,KAAA,cAA+KI,QAAWC,KAAA,sCAA4CE,MAASX,QAAA,wBAAAC,aAAiDC,MAAA,0CAAAC,MAAA,sGAAAC,KAAA,4BAAkMI,QAAWC,KAAA,6CAAmDG,SAAYC,QAAUC,MAAQC,GAAA,SAAAC,KAAA,cAAAC,MAAA,+CAAAC,IAAA,uBAAAC,IAAA,yPAAsXL,MAAQC,GAAA,WAAAC,KAAA,YAAAC,MAAA,+DAAAC,IAAA,2BAAAC,IAAA,sCAAsLC,aAAgBX,KAAA,wBAAAY,MAAA,GAAAX,KAAA,oCAAAC,KAAA","file":"path---react-에서-mobx-이용하기-i-dfd5fd73d181f94a7d0d.js","sourcesContent":["webpackJsonp([14731181378097],{\n\n/***/ 500:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><img src=\\\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/839b73fe29853699b34731dd60b6dbad/1_fVyLVvnbisXOgh1v3EhTrg.png\\\" alt=\\\"React &#x26; Mobx\\\"></p>\\n<p>React 진영에는 상태 관리를 하기 위해 Redux 라는 강력한 도구를 많이 이용하고 있습니다. 저도 여태 React 또는 React Native 작업을 진행하면서 상태 관리를 위해서는 Redux 를 이용해 왔었습니다.</p>\\n<p>프론트엔드 개발을 전문으로 하지 않는 저로서는 Redux 를 이용한 상태관리를 이해하는 것이 쉽지만은 않았습니다. Redux 를 이해하기 위해서는 Action 과 Reducer 그리고 Saga 또는 redux-thunk 와 같은 개념 또는 도구를 함께 이해해야 했고, 해당 기술을 조금씩 이해한 뒤에도 흐름을 쫒아가는 것이 쉽지만은 않았던 기억이 있었습니다.</p>\\n<p>이번에 오랜만에 React 를 이용한 SPA 를 제작하면서 Redux 가 아닌 Mobx 를 이용하여 상태 관리를 해 보고자 마음을 먹었는데, 이유는 잠깐 Mobx 를 살펴본 바로는 Redux 에 비해 상당히 간결하고 흐름이 직관적이어서 이해하기가 편했기 때문입니다.</p>\\n<hr>\\n<h3 id=\\\"mobx-의-핵심-기능들\\\"><a href=\\\"#mobx-%EC%9D%98-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EB%8A%A5%EB%93%A4\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mobx 의 핵심 기능들</h3>\\n<p>Mobx 에는 다음과 같은 주요 개념들이 있습니다. 이 내용들은 Mobx 를 이해하는데 필수적인 부분이라 이해하고 넘어가면 편리합니다.</p>\\n<h3 id=\\\"1-observable\\\"><a href=\\\"#1-observable\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>1. Observable</h3>\\n<p>Mobx 를 이용하여 관찰하고자 하는 상태값이 있다면 Observable 기능을 이용하여 상태를 관찰할 수 있습니다. 실제 사용하는 예제는 다음과 같습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> observable<span class=\\\"token punctuation\\\">,</span> action <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'mobx'</span>\\n<span class=\\\"token keyword\\\">import</span> agent <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'../agent'</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserStore</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  @observable currentUser\\n  @observable loadingUser\\n  @observable updatingUser\\n\\n  @action <span class=\\\"token function\\\">pullUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>loadingUser <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n    <span class=\\\"token keyword\\\">return</span> agent<span class=\\\"token punctuation\\\">.</span>Auth<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">current</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">action</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>currentUser <span class=\\\"token operator\\\">=</span> user<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">finally</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">action</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>loadingUser <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  @action <span class=\\\"token function\\\">updateUser</span><span class=\\\"token punctuation\\\">(</span>newUser<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>updatingUser <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n    <span class=\\\"token keyword\\\">return</span> agent<span class=\\\"token punctuation\\\">.</span>Auth<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">save</span><span class=\\\"token punctuation\\\">(</span>newUser<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">action</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>currentUser <span class=\\\"token operator\\\">=</span> user<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">finally</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">action</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>updatingUser <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  @action <span class=\\\"token function\\\">forgetUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>currentUser <span class=\\\"token operator\\\">=</span> undefined\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">UserStore</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>위에서 @observable 로 설정된 값들은 모두 관찰이 가능한 상태들입니다. 즉, 해당 상태가 변경이 되면 상태를 관찰하고 있던 Observer Component 의 render 함수가 호출이 되어 화면이 갱신되게 됩니다.</p>\\n<hr>\\n<h3 id=\\\"2-action\\\"><a href=\\\"#2-action\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>2. Action</h3>\\n<p>액션은 상태의 변화를 일으키는 함수를 의미합니다. 위에서 얘기한 observable 한 상태값을 변화시키는 기능을 수행하는 함수가 있다면 이 함수에 @action 을 연결할 수 있습니다. 위의 예에서는 updateUser 또는 forgetUser 함수가 action 함수가 됩니다.</p>\\n<hr>\\n<h3 id=\\\"3-observer\\\"><a href=\\\"#3-observer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>3. Observer</h3>\\n<p>위에서 얘기한 observable 한 상태를 감시하는 주체인 Components 를 Observer 로 등록할 수 있습니다. 즉, Observable (관찰 가능한 상태) 값이 변경이 있을 때 그에 반응하는 Component 를 만들고 싶다면 해당 Component 를 Observer 로 등록하면 됩니다.\\nComponent 를 Observer 로 등록하는 방법은 @observer annotation 을 이용하여 간단히 등록할 수 있습니다. 아래는 실제 사용 예시입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> inject<span class=\\\"token punctuation\\\">,</span> observer <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'mobx-react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n@<span class=\\\"token function\\\">inject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'userStore'</span><span class=\\\"token punctuation\\\">)</span>\\n@observer\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SettingsForm</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      image<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span>\\n      username<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span>\\n      bio<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span>\\n      email<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span>\\n      password<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">updateState</span> <span class=\\\"token operator\\\">=</span> field <span class=\\\"token operator\\\">=></span> ev <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">const</span> newState <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">assign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> state<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> ev<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>newState<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token operator\\\">...</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token comment\\\">// userStore 내의 @observable 상태가 변경될 경우 화면을 갱신함</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<hr>\\n<h3 id=\\\"4-inject\\\"><a href=\\\"#4-inject\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>4. inject</h3>\\n<p>Observer 로 등록된 Component 에서 Observable 한 상태를 포함하고 있는 Store 를 접근하고 싶다면, mobx-react package 의 inject 를 이용하면 쉽게 해결할 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> inject<span class=\\\"token punctuation\\\">,</span> observer <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'mobx-react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n@<span class=\\\"token function\\\">inject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'userStore'</span><span class=\\\"token punctuation\\\">)</span>\\n@observer\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SettingsForm</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>위의 예제에서 SettingForm Component 는 userStore 내에 있는 상태의 변화를 감시하기 위해 Observer 로 등록되었습니다. 이제 SettingForm Component 에서 userStore 를 접근할 수 있도록 @inject annotation 을 이용하였습니다.</p>\",\"timeToRead\":2,\"excerpt\":\"React 진영에는 상태 관리를 하기 위해 Redux 라는 강력한 도구를 많이 이용하고 있습니다. 저도 여태 React 또는 React Native 작업을 진행하면서 상태 관리를 위해서는 Redux…\",\"frontmatter\":{\"title\":\"React 에서 Mobx 이용하기 I\",\"cover\":\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/87836b5eb053590be9fc6d495e7858fc/cover7.jpg\",\"date\":\"2019-01-29T23:12:00.000Z\",\"category\":\"tech\",\"tags\":[\"react\",\"mobx\",\"annotation\"],\"author\":\"wecanooo\"},\"fields\":{\"slug\":\"/react-에서-mobx-이용하기-i\"}},\"prev\":{\"excerpt\":\" 이번 에피소드에서는  Github Pages 의 기능을 이용하여 간단한 블로그를 제작하는 방법을 알아보고자 한다. 많은 사람들이 블로그를 운영하기 위해서  Wordpress…\",\"frontmatter\":{\"title\":\"Github와 Jekyll을 이용한 무료 블로그 만들기 - 1\",\"cover\":\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/87836b5eb053590be9fc6d495e7858fc/cover7.jpg\",\"date\":\"2016-04-29\"},\"fields\":{\"slug\":\"/github와-jekyll을-이용한-무료-블로그-만들기-1\"}},\"next\":{\"excerpt\":\"Rails 에서 Static Page…\",\"frontmatter\":{\"title\":\"Rails에서 template 파일이 존재할 경우에만 render 수행\",\"cover\":\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/87836b5eb053590be9fc6d495e7858fc/cover7.jpg\",\"date\":\"2019-01-14T16:12:00.000Z\"},\"fields\":{\"slug\":\"/rails에서-template-파일이-존재할-경우에만-render-수행\"}},\"authors\":{\"edges\":[{\"node\":{\"id\":\"casper\",\"name\":\"Casper User\",\"image\":\"https://api.adorable.io/avatars/150/test.png\",\"url\":\"http://gatsbyjs.org/\",\"bio\":\"Yeah, I like animals better than people sometimes... Especially dogs. Dogs are the best. Every time you come home, they act like they haven't seen you in a year. And the good thing about dogs... is they got different dogs for different people.\"}},{\"node\":{\"id\":\"wecanooo\",\"name\":\"Eric Jang\",\"image\":\"https://api.adorable.io/avatars/150/wecanooo@adorable.io.png\",\"url\":\"http://about.me/wecanooo\",\"bio\":\"루비온레일즈를 좋아하고, 여행을 좋아하는 개발자입니다.\"}}]}},\"pathContext\":{\"slug\":\"/react-에서-mobx-이용하기-i\",\"total\":13,\"prev\":\"/github와-jekyll을-이용한-무료-블로그-만들기-1\",\"next\":\"/rails에서-template-파일이-존재할-경우에만-render-수행\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---react-에서-mobx-이용하기-i-dfd5fd73d181f94a7d0d.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><img src=\\\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/839b73fe29853699b34731dd60b6dbad/1_fVyLVvnbisXOgh1v3EhTrg.png\\\" alt=\\\"React &#x26; Mobx\\\"></p>\\n<p>React 진영에는 상태 관리를 하기 위해 Redux 라는 강력한 도구를 많이 이용하고 있습니다. 저도 여태 React 또는 React Native 작업을 진행하면서 상태 관리를 위해서는 Redux 를 이용해 왔었습니다.</p>\\n<p>프론트엔드 개발을 전문으로 하지 않는 저로서는 Redux 를 이용한 상태관리를 이해하는 것이 쉽지만은 않았습니다. Redux 를 이해하기 위해서는 Action 과 Reducer 그리고 Saga 또는 redux-thunk 와 같은 개념 또는 도구를 함께 이해해야 했고, 해당 기술을 조금씩 이해한 뒤에도 흐름을 쫒아가는 것이 쉽지만은 않았던 기억이 있었습니다.</p>\\n<p>이번에 오랜만에 React 를 이용한 SPA 를 제작하면서 Redux 가 아닌 Mobx 를 이용하여 상태 관리를 해 보고자 마음을 먹었는데, 이유는 잠깐 Mobx 를 살펴본 바로는 Redux 에 비해 상당히 간결하고 흐름이 직관적이어서 이해하기가 편했기 때문입니다.</p>\\n<hr>\\n<h3 id=\\\"mobx-의-핵심-기능들\\\"><a href=\\\"#mobx-%EC%9D%98-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EB%8A%A5%EB%93%A4\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mobx 의 핵심 기능들</h3>\\n<p>Mobx 에는 다음과 같은 주요 개념들이 있습니다. 이 내용들은 Mobx 를 이해하는데 필수적인 부분이라 이해하고 넘어가면 편리합니다.</p>\\n<h3 id=\\\"1-observable\\\"><a href=\\\"#1-observable\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>1. Observable</h3>\\n<p>Mobx 를 이용하여 관찰하고자 하는 상태값이 있다면 Observable 기능을 이용하여 상태를 관찰할 수 있습니다. 실제 사용하는 예제는 다음과 같습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> observable<span class=\\\"token punctuation\\\">,</span> action <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'mobx'</span>\\n<span class=\\\"token keyword\\\">import</span> agent <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'../agent'</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserStore</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  @observable currentUser\\n  @observable loadingUser\\n  @observable updatingUser\\n\\n  @action <span class=\\\"token function\\\">pullUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>loadingUser <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n    <span class=\\\"token keyword\\\">return</span> agent<span class=\\\"token punctuation\\\">.</span>Auth<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">current</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">action</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>currentUser <span class=\\\"token operator\\\">=</span> user<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">finally</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">action</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>loadingUser <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  @action <span class=\\\"token function\\\">updateUser</span><span class=\\\"token punctuation\\\">(</span>newUser<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>updatingUser <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n    <span class=\\\"token keyword\\\">return</span> agent<span class=\\\"token punctuation\\\">.</span>Auth<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">save</span><span class=\\\"token punctuation\\\">(</span>newUser<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">action</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>currentUser <span class=\\\"token operator\\\">=</span> user<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">finally</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">action</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>updatingUser <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  @action <span class=\\\"token function\\\">forgetUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>currentUser <span class=\\\"token operator\\\">=</span> undefined\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">UserStore</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>위에서 @observable 로 설정된 값들은 모두 관찰이 가능한 상태들입니다. 즉, 해당 상태가 변경이 되면 상태를 관찰하고 있던 Observer Component 의 render 함수가 호출이 되어 화면이 갱신되게 됩니다.</p>\\n<hr>\\n<h3 id=\\\"2-action\\\"><a href=\\\"#2-action\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>2. Action</h3>\\n<p>액션은 상태의 변화를 일으키는 함수를 의미합니다. 위에서 얘기한 observable 한 상태값을 변화시키는 기능을 수행하는 함수가 있다면 이 함수에 @action 을 연결할 수 있습니다. 위의 예에서는 updateUser 또는 forgetUser 함수가 action 함수가 됩니다.</p>\\n<hr>\\n<h3 id=\\\"3-observer\\\"><a href=\\\"#3-observer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>3. Observer</h3>\\n<p>위에서 얘기한 observable 한 상태를 감시하는 주체인 Components 를 Observer 로 등록할 수 있습니다. 즉, Observable (관찰 가능한 상태) 값이 변경이 있을 때 그에 반응하는 Component 를 만들고 싶다면 해당 Component 를 Observer 로 등록하면 됩니다.\\nComponent 를 Observer 로 등록하는 방법은 @observer annotation 을 이용하여 간단히 등록할 수 있습니다. 아래는 실제 사용 예시입니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> inject<span class=\\\"token punctuation\\\">,</span> observer <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'mobx-react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n@<span class=\\\"token function\\\">inject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'userStore'</span><span class=\\\"token punctuation\\\">)</span>\\n@observer\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SettingsForm</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      image<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span>\\n      username<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span>\\n      bio<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span>\\n      email<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span>\\n      password<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">updateState</span> <span class=\\\"token operator\\\">=</span> field <span class=\\\"token operator\\\">=></span> ev <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">const</span> newState <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">assign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> state<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">[</span>field<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> ev<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>newState<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token operator\\\">...</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token comment\\\">// userStore 내의 @observable 상태가 변경될 경우 화면을 갱신함</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<hr>\\n<h3 id=\\\"4-inject\\\"><a href=\\\"#4-inject\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>4. inject</h3>\\n<p>Observer 로 등록된 Component 에서 Observable 한 상태를 포함하고 있는 Store 를 접근하고 싶다면, mobx-react package 의 inject 를 이용하면 쉽게 해결할 수 있습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> inject<span class=\\\"token punctuation\\\">,</span> observer <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'mobx-react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n@<span class=\\\"token function\\\">inject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'userStore'</span><span class=\\\"token punctuation\\\">)</span>\\n@observer\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SettingsForm</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>위의 예제에서 SettingForm Component 는 userStore 내에 있는 상태의 변화를 감시하기 위해 Observer 로 등록되었습니다. 이제 SettingForm Component 에서 userStore 를 접근할 수 있도록 @inject annotation 을 이용하였습니다.</p>\",\"timeToRead\":2,\"excerpt\":\"React 진영에는 상태 관리를 하기 위해 Redux 라는 강력한 도구를 많이 이용하고 있습니다. 저도 여태 React 또는 React Native 작업을 진행하면서 상태 관리를 위해서는 Redux…\",\"frontmatter\":{\"title\":\"React 에서 Mobx 이용하기 I\",\"cover\":\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/87836b5eb053590be9fc6d495e7858fc/cover7.jpg\",\"date\":\"2019-01-29T23:12:00.000Z\",\"category\":\"tech\",\"tags\":[\"react\",\"mobx\",\"annotation\"],\"author\":\"wecanooo\"},\"fields\":{\"slug\":\"/react-에서-mobx-이용하기-i\"}},\"prev\":{\"excerpt\":\" 이번 에피소드에서는  Github Pages 의 기능을 이용하여 간단한 블로그를 제작하는 방법을 알아보고자 한다. 많은 사람들이 블로그를 운영하기 위해서  Wordpress…\",\"frontmatter\":{\"title\":\"Github와 Jekyll을 이용한 무료 블로그 만들기 - 1\",\"cover\":\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/87836b5eb053590be9fc6d495e7858fc/cover7.jpg\",\"date\":\"2016-04-29\"},\"fields\":{\"slug\":\"/github와-jekyll을-이용한-무료-블로그-만들기-1\"}},\"next\":{\"excerpt\":\"Rails 에서 Static Page…\",\"frontmatter\":{\"title\":\"Rails에서 template 파일이 존재할 경우에만 render 수행\",\"cover\":\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/87836b5eb053590be9fc6d495e7858fc/cover7.jpg\",\"date\":\"2019-01-14T16:12:00.000Z\"},\"fields\":{\"slug\":\"/rails에서-template-파일이-존재할-경우에만-render-수행\"}},\"authors\":{\"edges\":[{\"node\":{\"id\":\"casper\",\"name\":\"Casper User\",\"image\":\"https://api.adorable.io/avatars/150/test.png\",\"url\":\"http://gatsbyjs.org/\",\"bio\":\"Yeah, I like animals better than people sometimes... Especially dogs. Dogs are the best. Every time you come home, they act like they haven't seen you in a year. And the good thing about dogs... is they got different dogs for different people.\"}},{\"node\":{\"id\":\"wecanooo\",\"name\":\"Eric Jang\",\"image\":\"https://api.adorable.io/avatars/150/wecanooo@adorable.io.png\",\"url\":\"http://about.me/wecanooo\",\"bio\":\"루비온레일즈를 좋아하고, 여행을 좋아하는 개발자입니다.\"}}]}},\"pathContext\":{\"slug\":\"/react-에서-mobx-이용하기-i\",\"total\":13,\"prev\":\"/github와-jekyll을-이용한-무료-블로그-만들기-1\",\"next\":\"/rails에서-template-파일이-존재할-경우에만-render-수행\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/react-에서-mobx-이용하기-i.json\n// module id = 500\n// module chunks = 14731181378097"],"sourceRoot":""}