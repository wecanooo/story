<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[기억하기 귀찮은 잡다한 기술이야기]]></title><description><![CDATA[기억하자니 쓸데없이 귀찮고, 기억 안하자니 모르면 상당히 귀찮은 것들을 기록합니다.]]></description><link>https://wecanooo.github.io/story</link><image><url>https://wecanooo.github.io/story/logos/logo-512.png</url><title>기억하기 귀찮은 잡다한 기술이야기</title><link>https://wecanooo.github.io/story</link></image><generator>GatsbyJS Casper Starter</generator><lastBuildDate>Wed, 19 Dec 2018 14:36:26 GMT</lastBuildDate><atom:link href="https://wecanooo.github.io/story/rss.xml" rel="self" type="application/rss+xml"/><author><![CDATA[wecanooo]]></author><copyright><![CDATA[wecanooo@gmail.com © 2018]]></copyright><item><title><![CDATA[API 개발에서 Postman 이용하기]]></title><description><![CDATA[Rails API 를 만들어 가면서의 고민 회사에서 Rails API 를 이용하여 Backend API Server 를 제작하고 있습니다. API 를 제작하는데 있어서 필수적으로 제공되어야 할 것은 일관성 있는 API 설계와 더불어 표준적인 API…]]></description><link>https://wecanooo.github.io/story/api-개발에서-postman-이용하기</link><guid isPermaLink="false">https://wecanooo.github.io/story/api-개발에서-postman-이용하기</guid><category><![CDATA[api]]></category><category><![CDATA[rails]]></category><category><![CDATA[postman]]></category><dc:creator><![CDATA[wecanooo]]></dc:creator><pubDate>Wed, 19 Dec 2018 20:37:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/b5a3f174d257be33bbbc1e6e7f787f6a/api.webp&quot; alt=&quot;Rails API&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;rails-api-를-만들어-가면서의-고민&quot;&gt;&lt;a href=&quot;#rails-api-%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4-%EA%B0%80%EB%A9%B4%EC%84%9C%EC%9D%98-%EA%B3%A0%EB%AF%BC&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rails API 를 만들어 가면서의 고민&lt;/h3&gt;
&lt;p&gt;회사에서 Rails API 를 이용하여 Backend API Server 를 제작하고 있습니다. API 를 제작하는데 있어서 필수적으로 제공되어야 할 것은 일관성 있는 API 설계와 더불어 표준적인 API Spec 을 따라 클라이언트와 데이터를 교환하는 것일 겁니다.&lt;/p&gt;
&lt;p&gt;하지만, API Server 를 제작하는 곳에서는 위의 내용에 더해 API 버전을 지속적으로 관리하는 것과 지속적으로 발전해 나가는 API Endpoint 가 정상적으로 잘 동작하는지에 대한 점검방법 또한 많은 고민을 하게 만드는 요소가 됩니다.&lt;/p&gt;
&lt;p&gt;Rails Framework 를 사용하면서 그 사용의 편리성에 대체적으로 만족하고 사용하고 있습니다만, &lt;a href=&quot;https://swagger.io/&quot;&gt;Swagger&lt;/a&gt; 를 이용한 API 문서화 방법은 다른 개발 프레임워크들에 비해 의외로 편리하게 되어 있지 않습니다. 또한, Swagger 로 제작된 API Endpoint 는 지속적인 개발 기간동안 정상적으로 동작하는지에 대한 검증을 진행하기가 쉽지 않은 문제점이 있었습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;편리한 방법으로 API Endpoint 검증과 함께 API 문서화를 한번에 이뤄낼 수 있는 방법은 없을까?&lt;/li&gt;
&lt;li&gt;테스트 도구와 문서화 도구를 분리하지 않을 수 있는 방법은 없을까?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;api-테스트-도구&quot;&gt;&lt;a href=&quot;#api-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8F%84%EA%B5%AC&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;API 테스트 도구&lt;/h3&gt;
&lt;p&gt;위 문제를 고민하던 중 일반적으로 제작된 API 를 테스트를 하기 위해서 어떤 방법을 사용하고 있는지 나열해 보았습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Command Line 에서 curl 을 이용하는 방법&lt;/li&gt;
&lt;li&gt;IntelliJ 나 VSCode 와 같은 통합 IDE 에서 제공하는 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=humao.rest-client&quot;&gt;REST API Client&lt;/a&gt; 도구를 이용하는 방법&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; 과 같은 Gui 도구를 이용하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;curl 을 사용하는 방법은 비교적 Command Line 에 익숙한 사용자들에게는 편리한 방법일지는 몰라도 히스토리 관리라던지 작성된 코드의 재활용이 쉽지 않다는 불편함이 있습니다.&lt;/p&gt;
&lt;p&gt;최근까지는 IDE 에서 제공되는 REST API Client 도구를 이용하여 API 테스트를 진행해 왔었습니다. 개발을 진행하면서 내부 테스트 용도로는 상당히 편리함을 느꼈지만, 문서화 문제를 해결하진 못했고 프론트엔드 개발자와의 협업에도 크게 도움이 되진 못했습니다.&lt;/p&gt;
&lt;p&gt;개인적으로 간간히 사용하던 &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; 을 최근에 다시 사용해 보면서 Postman 의 강력함에 놀라고 있는 중입니다. 예전부터 Postman 을 사용하면서 좋았던 것은 &lt;a href=&quot;https://learning.getpostman.com/docs/postman/collections/creating_collections/&quot;&gt;Collection&lt;/a&gt; 기능과 &lt;a href=&quot;https://learning.getpostman.com/docs/postman/collections/sharing_collections/&quot;&gt;Collection Share&lt;/a&gt; 기능을 통해 만들었던 코드를 재활용할 수 있다는 것에서 상당히 만족하고 있었습니다.
이번에 &lt;a href=&quot;https://learning.getpostman.com/docs/postman/scripts/test_scripts/&quot;&gt;Test Script&lt;/a&gt; 기능까지 알게되면서 Postman 이라는 도구를 다시 한번 살펴보게 되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/c7532b5bf0b64d61b0652f18ad3b7e23/postman_test_script.png&quot; alt=&quot;Postman Test Script&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;postman&quot;&gt;&lt;a href=&quot;#postman&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Postman&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; 은 Chrome Extendsion 과 Desktop 설치형 App 으로 제공되는 RestAPI Client 입니다. 그 기능이 상당히 강력하고 아래와 같이 Command Line 을 이용한 Restful API 호출에 익숙하지 않은 사용자들에게는 정말 편리한 도구입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;curl -i -X POST -H &amp;quot;Content-Type:application/json&amp;quot; http://localhost:3000/api/v1/channels -d &amp;#39;{&amp;quot;title&amp;quot;:&amp;quot;- The Naked Scientists Podcast - Stripping Down Science-new-title2&amp;quot;,&amp;quot;linkOnPodcastpedia&amp;quot;:&amp;quot;https://github.com/Codingpedia/podcastpedia/podcasts/792/-The-Naked-Scientists-Podcast-Stripping-Down-Science&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;The Naked Scientists flagship science show brings you a lighthearted look at the latest scientific breakthroughs, interviews with the world top scientists, answers to your science questions and science experiments to try at home.&amp;quot;}&amp;#39;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Postman 이 편리한 이유는 비단 잘 구성된 GUI 도구라는 것에만 그치지 않습니다. &lt;a href=&quot;https://learning.getpostman.com/docs/postman/collections/creating_collections/&quot;&gt;Collection&lt;/a&gt; 기능을 통해 한 단위의 기능 또는 프로젝트 별로 API 들을 Group 화 할 수 있으며, &lt;a href=&quot;https://learning.getpostman.com/docs/postman/collections/sharing_collections/&quot;&gt;Collection Share&lt;/a&gt; 기능으로 다른 사용자 또는 다른 PC 로 저장된 Collection 을 쉽게 옮길 수도 있습니다.&lt;/p&gt;
&lt;p&gt;또한, &lt;a href=&quot;https://learning.getpostman.com/docs/postman/collection_runs/command_line_integration_with_newman/&quot;&gt;Newman&lt;/a&gt; 이라는 Cli 를 통해 저장된 &lt;a href=&quot;https://learning.getpostman.com/docs/postman/collections/creating_collections/&quot;&gt;Collection&lt;/a&gt; 을 Command Line Runner 로 실행해 볼 수도 있는 강력한 기능을 제공하고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/c7532b5bf0b64d61b0652f18ad3b7e23/newman.gif&quot; alt=&quot;Postman Newman Cli&quot;&gt;&lt;/p&gt;
&lt;p&gt;이 문서에서 다루고 싶은 주제는 &lt;a href=&quot;https://guides.rubyonrails.org/api_app.html&quot;&gt;Rails API&lt;/a&gt; + &lt;a href=&quot;https://about.gitlab.com/product/continuous-integration/&quot;&gt;Gitlab CI&lt;/a&gt; + &lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt; + &lt;a href=&quot;https://github.com/presidentbeef/brakeman&quot;&gt;Brakeman&lt;/a&gt; + &lt;a href=&quot;https://learning.getpostman.com/docs/postman/collection_runs/command_line_integration_with_newman/&quot;&gt;Newman&lt;/a&gt; + &lt;a href=&quot;https://learning.getpostman.com/docs/postman/collections/creating_collections/&quot;&gt;Postman Collection&lt;/a&gt; 의 조합을 통해 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;빌드 자동화&lt;/li&gt;
&lt;li&gt;테스트 검증&lt;/li&gt;
&lt;li&gt;API Endpoint 검증&lt;/li&gt;
&lt;li&gt;보안 취약점 검증&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;을 진행해 보고자 합니다. 또한, 이 문서의 마지막에서는 Postman 에서 제공하고 있는 &lt;a href=&quot;https://learning.getpostman.com/docs/postman/api_documentation/intro_to_api_documentation/&quot;&gt;Postman API Documentation&lt;/a&gt; 기능을 통해 그동안 귀찮게 느껴졌었던 API Documentation 을 함께 해결하고자 합니다.&lt;/p&gt;
&lt;h3 id=&quot;이-문서에서-다루지-않는-것들&quot;&gt;&lt;a href=&quot;#%EC%9D%B4-%EB%AC%B8%EC%84%9C%EC%97%90%EC%84%9C-%EB%8B%A4%EB%A3%A8%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%83%EB%93%A4&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이 문서에서 다루지 않는 것들&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rails API 프로젝트 생성 방법&lt;/li&gt;
&lt;li&gt;API 코드 작성 방법&lt;/li&gt;
&lt;li&gt;Rspec 코드 작성 방법&lt;/li&gt;
&lt;li&gt;Gitlab CI 설치방법 및 기본개념&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서는 여러분이 Rails 라는 개발도구에 이미 익숙하고, Rspec 을 통해 테스트 코드를 작성할 수 있는 상태라고 가정합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;postman-으로-테스트-코드-작성&quot;&gt;&lt;a href=&quot;#postman-%EC%9C%BC%EB%A1%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Postman 으로 테스트 코드 작성&lt;/h3&gt;
&lt;p&gt;앞서 얘기한 Postman 도구를 통해 테스트 코드를 작성해 보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/c7532b5bf0b64d61b0652f18ad3b7e23/api.png&quot; alt=&quot;Postman API&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/c7532b5bf0b64d61b0652f18ad3b7e23/postman.png&quot; alt=&quot;Postman Test Script&quot;&gt;&lt;/p&gt;
&lt;p&gt;그림에서 표시한 것처럼 API 작성과 Tests 스크립트를 차례로 작성합니다. 아래 Test Script 에 대한 샘플 코드입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 1. 요청 이후 status code 체크

pm.test(&amp;#39;Check status code === 200&amp;#39;, () =&amp;gt; pm.response.to.have.status(200));

// 2. 요청 이후 api_token 존재여부 체크

pm.test(&amp;#39;Check api_token&amp;#39;, () =&amp;gt; {
    var jsonData = pm.response.json();
    pm.expect(jsonData.api_token !== null).to.be.true;
});&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;이후 &lt;code class=&quot;language-text&quot;&gt;send&lt;/code&gt; 버튼을 눌러 API 실행을 눌러보면 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/c7532b5bf0b64d61b0652f18ad3b7e23/result.png&quot; alt=&quot;Postman Result&quot;&gt;&lt;/p&gt;
&lt;p&gt;그림과 같이 호출결과와 테스트 결과를 확인할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;postman-collection-생성&quot;&gt;&lt;a href=&quot;#postman-collection-%EC%83%9D%EC%84%B1&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Postman Collection 생성&lt;/h3&gt;
&lt;p&gt;이제 위에서 진행한 방식의 API 호출 및 테스트 코드작성을 Collection 으로 만들어 보겠습니다.
&lt;a href=&quot;https://learning.getpostman.com/docs/postman/collections/creating_collections/&quot;&gt;Postman Collection 만들기&lt;/a&gt; 에서 자세한 내용을 보실 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/c7532b5bf0b64d61b0652f18ad3b7e23/collection.png&quot; alt=&quot;Postman Collection&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 생성된 Collection 을 한번에 실행해 보기 위해서는&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Postman 의 &lt;a href=&quot;https://learning.getpostman.com/docs/postman/collection_runs/starting_a_collection_run/&quot;&gt;Collection Runner&lt;/a&gt; 를 통해 UI 로 실행&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://learning.getpostman.com/docs/postman/collection_runs/command_line_integration_with_newman/&quot;&gt;Newman&lt;/a&gt; 을 통해 Command Line 에서 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;두 가지 방식이 있습니다. Newman 을 이용한 방식은 나중에 Gitlab CI 와 연동해서 사용할 것이기 때문에 지금은 Collection Runner 를 통해 실행하는 방식을 간단히 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/c7532b5bf0b64d61b0652f18ad3b7e23/run.png&quot; alt=&quot;Collection Runner&quot;&gt;&lt;/p&gt;
&lt;p&gt;위의 그림처럼 Collection 에서 Run 을 누르게 되면 아래와 같은 새로운 창이 뜨게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/c7532b5bf0b64d61b0652f18ad3b7e23/run_collection.png&quot; alt=&quot;Run&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/c7532b5bf0b64d61b0652f18ad3b7e23/run_result.png&quot; alt=&quot;Result&quot;&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 방식으로 Postman 에서 작성된 Test Script 를 검증해 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;다음으로 넘어가기 전에 Newman Cli 를 통해 Collection 에 등록된 테스트 코드를 실행하기 위해서는 다음 이미지와 같이 Collection 을 JSON 파일로 Export 시킬 필요가 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/490504b627a15d108f1afe60362ce9da/export.png&quot; alt=&quot;export&quot;&gt;&lt;/p&gt;
&lt;p&gt;예를 들어, Collection 을 &lt;code class=&quot;language-text&quot;&gt;postman_collection.json&lt;/code&gt; 이라는 파일명으로 export 했다면 Newman 으로는 다음과 같이 Collection 테스트를 수행해볼 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;newman run ./broker.postman_collection.json&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&quot;gitlab-ci--소스-통합-및-동화를-위한-파이프라인&quot;&gt;&lt;a href=&quot;#gitlab-ci--%EC%86%8C%EC%8A%A4-%ED%86%B5%ED%95%A9-%EB%B0%8F-%EB%8F%99%ED%99%94%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8%1C&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gitlab CI : 소스 통합 및 동화를 위한 파이프라인&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/c7532b5bf0b64d61b0652f18ad3b7e23/ci-cd-test-deploy-illustration_2x.png&quot; alt=&quot;Gitlab CI&quot;&gt;&lt;/p&gt;
&lt;p&gt;Gitlab 은 Github 와 마찬가지로 소스코드 형상관리를 위한 도구입니다. Gitlab 에 대한 자세한 설명은 여기에서는 생략하도록 하겠습니다. 우리가 알아볼 것은 Gitlab CI 입니다.
Gitlab CI 는 소스 통합 및 배포 자동화를 위한 도구로 일반적으로 많이 알려져 있는 &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; 또는 &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; 와 유사한 도구라고 보시면 됩니다.&lt;/p&gt;
&lt;p&gt;Gitlab CI 를 자세하게 알고 싶다면 &lt;a href=&quot;https://docs.gitlab.com/ee/ci/quick_start/&quot;&gt;Quick Start Gitlab CI&lt;/a&gt; 를 참고하세요. 여기에서는 Gitlab CI 에 대해서 자세한 내용을 다루진 않습니다. 여러분이 Gitlab CI 에 어느정도 익숙하다고 가정하겠습니다.&lt;/p&gt;
&lt;p&gt;이제 우리는 위에서 말한대로 Gitlab CI 를 통해 테스트 수행 + API 테스트 + 보안 취약점 검증을 진행할 것입니다.
먼저, .gitlab-ci.yml 파일을 아래와 같이 만들고 프로젝트 루트 디렉토리에 위치시킵니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;image: &amp;quot;ruby:2.4&amp;quot;

services:
  - mysql:5.7
  - redis:alpine

variables:
  MYSQL_ALLOW_EMPTY_PASSWORD: &amp;quot;1&amp;quot;
  RAILS_ENV: &amp;quot;test&amp;quot;
  NODE_ENV: &amp;quot;test&amp;quot;

cache:
  paths:
    - node_modules/

before_script:
  - ruby -v
  - which ruby
  - apt-get update -y
  - apt-get install -y libssl-dev build-essential wget
  - npm -v
  - npm install
  - wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash
  - source /root/.bashrc
  - nvm install 6.6.0
  - nvm use 6.6.0
  - node -v
  - npm install newman -g
  - gem install bundler --no-ri --no-rdoc
  - bundle install --quiet
  - bundle exec rake db:create --quiet
  - bundle exec rake db:migrate --quiet
  - bundle exec rake db:test:prepare --quiet

api:
  script:
    # 백그라운드로 레일즈 서버 실행
    - bundle exec rails s -d
    - newman run ./broker.postman_collection.json

rspec:
  script:
    - rspec

brakeman:
  script:
    - bundle exec brakeman -z -q&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Gitlab CI Runner 는 Docker 에서 동작하도록 설정을 한 상태입니다. 기본적으로 ruby 2.4 버전의 docker image 를 기본으로 하여, 프로젝트에서 사용하는 mysql, redis 를 이용할 수 있도록 서비스를 연결합니다.&lt;/p&gt;
&lt;p&gt;Docker 환경에서 사용할 환경변수는 &lt;code class=&quot;language-text&quot;&gt;variables&lt;/code&gt; 항목으로 설정을 할 수 있습니다. 환경변수에 해당하는 ENV 설정은 여기를 통해 진행하세요.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;before_script&lt;/code&gt; 에서는 본격적인 CI Script 를 돌리기 전에 수행하고자 하는 항목들을 설정할 수 있습니다. &lt;code class=&quot;language-text&quot;&gt;before_script&lt;/code&gt; 항목을 하나씩 뜯어보자면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;before_script:
  # docker 내에 ruby on rails 환경을 운영하기 위한 기본 libraries 를 설치합니다.
  - ruby -v
  - which ruby
  - apt-get update -y
  - apt-get install -y libssl-dev build-essential wget

  # newman cli 를 설치하기 위해서는 npm 을 통해 설치하게 됩니다.
  # npm 이 기본적으로 설치되어 있지 않기 때문에 npm 설치를 위해
  # nvm 을 우선 설치하고 npm install newman -g 를 통해 newman 을 설치합니다.
  - wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash
  - source /root/.bashrc
  - nvm install 6.6.0
  - nvm use 6.6.0
  - node -v
  - npm install newman -g
 
  # rails 로 제작한 프로젝트를 실행하기 위해
  # 아래의 구문을 차례로 수행합니다.
  - gem install bundler --no-ri --no-rdoc
  - bundle install --quiet
  - bundle exec rake db:create --quiet
  - bundle exec rake db:migrate --quiet
  - bundle exec rake db:test:prepare --quiet&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;before_script&lt;/code&gt; 를 통해 &lt;code class=&quot;language-text&quot;&gt;rails&lt;/code&gt; 와 &lt;code class=&quot;language-text&quot;&gt;newman&lt;/code&gt; 을 동작시킬 수 있는 환경이 구성이 되었다면,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;api 테스트&lt;/li&gt;
&lt;li&gt;테스트 수행을 위한 rspec&lt;/li&gt;
&lt;li&gt;보안 취약성 점검을 위한 brakeman&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.gitlab-ci.yml 에 위의 항목을 설정하면 Gitlab CI Runner 에서 각각의 항목에 대해 Job 이 동작하게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/490504b627a15d108f1afe60362ce9da/gitlab.png&quot; alt=&quot;Gitlab&quot;&gt;&lt;/p&gt;
&lt;p&gt;이제 Gitlab 에 접속하여 프로젝트 Repository 에 들어가 좌측 메뉴에 있는 &lt;code class=&quot;language-text&quot;&gt;CI / CD&lt;/code&gt; 내의 &lt;code class=&quot;language-text&quot;&gt;Pipeline&lt;/code&gt; 을 눌러보면 .gitlab-ci.yml 에 의해 수행되는 자동화 파이프라인을 확인할 수 있습니다. 파이프라인을 클릭하여 세부 Job 을 보면 아래와 같은 화면을 보실 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/490504b627a15d108f1afe60362ce9da/job.png&quot; alt=&quot;Job&quot;&gt;&lt;/p&gt;
&lt;p&gt;각각의 Job 이 모두 성공으로 떨어져야 파이프라인이 성공적으로 끝나게 되며 Build 는 &lt;code class=&quot;language-text&quot;&gt;Passed&lt;/code&gt; 로 떨어집니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/490504b627a15d108f1afe60362ce9da/rspec.png&quot; alt=&quot;RSpec&quot;&gt;&lt;/p&gt;
&lt;p&gt;위 이미지는 &lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt; 을 이용한 테스트 수행 결과입니다. Rspec 에 대한 자세한 설명은 여기에서 진행하지 않습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/490504b627a15d108f1afe60362ce9da/brakeman.png&quot; alt=&quot;Brakeman&quot;&gt;&lt;/p&gt;
&lt;p&gt;위 이미지는 &lt;a href=&quot;https://github.com/presidentbeef/brakeman&quot;&gt;Brakeman&lt;/a&gt; 을 이용하여 보안 취약점을 점검하는 과정입니다. 만약, 코드에 보안 취약점이 있다면 Job 은 실패로 떨어지게 되고 Build 는 실패로 판명날 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/490504b627a15d108f1afe60362ce9da/newman.png&quot; alt=&quot;Newman&quot;&gt;&lt;/p&gt;
&lt;p&gt;위 이미지는 &lt;a href=&quot;https://learning.getpostman.com/docs/postman/collection_runs/command_line_integration_with_newman/&quot;&gt;Newman Cli&lt;/a&gt; 를 이용하여 API TEST 를 점검하는 과정입니다.&lt;/p&gt;
&lt;p&gt;위와 같이 Gitlab CI 를 통해 테스트 + 보안 취약점 점검 + API 테스트까지 완료해 보았습니다. 이제 남은 것은 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;API 를 어떻게 쉽고 빠르게 문서화를 할 것인가? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;라는 질문을 해결해야 할 때입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;postman-을-이용한-api-문서화&quot;&gt;&lt;a href=&quot;#postman-%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-api-%EB%AC%B8%EC%84%9C%ED%99%94&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Postman 을 이용한 API 문서화&lt;/h3&gt;
&lt;p&gt;Postman 을 이용한 이유는 쉽게 API 를 명세화하고, 테스트를 수행할 수 있다는 점이 좋아서 사용한 것도 있지만, Postman 에 숨은 기능이 하나 더 있다면 바로 문서화를 상당히 쉽게 진행할 수 있다는 것입니다.&lt;/p&gt;
&lt;p&gt;위에서 설명한 &lt;a href=&quot;https://learning.getpostman.com/docs/postman/collections/creating_collections/&quot;&gt;Postman Collection&lt;/a&gt; 에는 Collection 의 내용을 Postman 웹사이트로 &lt;code class=&quot;language-text&quot;&gt;Publish&lt;/code&gt; 할 수 있는 기능이 제공됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/490504b627a15d108f1afe60362ce9da/publish.png&quot; alt=&quot;Collection Publish&quot;&gt;&lt;/p&gt;
&lt;p&gt;위와 같이 Collection 을 Publish 하게 되면 다음과 같이 멋진 API Document 를 출력할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/490504b627a15d108f1afe60362ce9da/document.png&quot; alt=&quot;Document&quot;&gt;&lt;/p&gt;
&lt;p&gt;어떤가요? API 문서가 멋지지 않나요? 이렇게 만들어진 문서는 &lt;code class=&quot;language-text&quot;&gt;Run in Postman&lt;/code&gt; 버튼으로 Postman 이 설치된 환경이라면 어디서든 편리하게 실행해볼 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이상으로 Gitlab CI + Postman 을 통해 API 테스트 수행 및 API 문서화까지 진행해 봤습니다. 예제에서는 Ruby on Rails 를 이용하였지만 본인이 이용하는 다른 개발 환경에서도 Gitlab CI 와 Postman 은 동일하게 수행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;아무쪼록 이 글이 API 테스트와 문서화를 고민하고 있는 다른 개발자 분들에게 도움이 되었으면 합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Jekyll 에서 Gatsby 로 블로그 이사하기]]></title><description><![CDATA[기존  제 블로그 는 Jekyll 기반으로 만들어 Github 로 배포를 했습니다.
오랫동안 블로그를 방치하다가 근래 정리해야 할 것들이 있어서 다시 만지려고 하니 이제는 Jekyll 도 설치 중에 오류가 발생하기도 하고, 요즘엔  React…]]></description><link>https://wecanooo.github.io/story/jekyll-에서-gatsby-로-블로그-이사하기</link><guid isPermaLink="false">https://wecanooo.github.io/story/jekyll-에서-gatsby-로-블로그-이사하기</guid><category><![CDATA[jekyll]]></category><category><![CDATA[react]]></category><category><![CDATA[gatsby]]></category><dc:creator><![CDATA[wecanooo]]></dc:creator><pubDate>Mon, 17 Dec 2018 23:57:00 GMT</pubDate><content:encoded>&lt;p&gt;기존 &lt;a href=&quot;https://wecanooo.github.com/blog/&quot;&gt;제 블로그&lt;/a&gt;는 Jekyll 기반으로 만들어 Github 로 배포를 했습니다.
오랫동안 블로그를 방치하다가 근래 정리해야 할 것들이 있어서 다시 만지려고 하니 이제는 Jekyll 도 설치 중에 오류가 발생하기도 하고, 요즘엔 &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; 기반의 Static Site Generator 들이 대세인지라 이번참에 저도 블로그 환경을 새롭게 단장하기로 마음을 먹었습니다.&lt;/p&gt;
&lt;p&gt;후보군을 보던 중 단연 눈에 띄는 것은 &lt;a href=&quot;https://nextjs.org/&quot;&gt;Next.js&lt;/a&gt; 와 &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; 두가지의 React 기반 Generator 였습니다.&lt;/p&gt;
&lt;p&gt;사실 예전부터 Next.js 는 개인적으로 관심을 많이 갖고 있던 Project 였으나, 회사에서 사용하고 있는 Gitlab 에서 제공되는 Gitlab CI  Template 중에 Gatsby 가 있는지라 이번참에 Gatsby 도 알아볼겸 Gatsby 로 옮기기로 했습니다.&lt;/p&gt;
&lt;p&gt;Gatsby 를 이용하여 한땀한땀 블로그를 만들기엔 인생은 너무 짧고 해야할 일은 너무 많습니다. 제가 사용하고 있던 기존 블로그의 디자인을 그대로 이용하기로 마음을 먹고 찾아보니 역시 &lt;a href=&quot;https://github.com/haysclark/gatsby-starter-casper&quot;&gt;Ghost 테마&lt;/a&gt; 가 있었습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;gatsby-cli-설치하기&quot;&gt;&lt;a href=&quot;#gatsby-cli-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gatsby Cli 설치하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/haysclark/gatsby-starter-casper&quot;&gt;Ghost 테마&lt;/a&gt; 에서 안내하는 것처럼 아래와 같이 자신의 블로그를 위한 Repository 를 생성해 줍니다. github repo 를 clone 해서 사용하는 방법도 있으나, 배포나 실행의 편의를 위해 gatsby-cli 를 설치하는 것을 추천합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install -g gatsby-cli&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&quot;starter-를-이용하여-블로그-생성하기&quot;&gt;&lt;a href=&quot;#starter-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Starter 를 이용하여 블로그 생성하기&lt;/h3&gt;
&lt;p&gt;gatsby cli 를 설치했다면 이제 gatsby command 로 블로그를 생성할 차례입니다. Gatsby 에서는 여러 유명한 Starter 들을 많이 제공하고 있어서 편리합니다. 저는 위에서 얘기한 것처럼 casper 라는 유명한 블로그 테마를 이용한 스타터를 이용했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;gatsby new 생성할폴더이름 https://github.com/haysclark/gatsby-starter-casper&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;위와 같이 설치한 뒤에는 간단하게 로컬에서 실행해 볼 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;cd 생성된폴더이름
gatsby develop&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;실행 후에는 &lt;a href=&quot;https://localhost:8000&quot;&gt;https://localhost:8000&lt;/a&gt; 을 통해 로컬에서 실행되는 blog 를 확인하실 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/87836b5eb053590be9fc6d495e7858fc/gatsby_develop.png&quot; alt=&quot;gatsby develop&quot;&gt;&lt;/p&gt;
&lt;p&gt;여기까지 진행하면 기본적인 blog 만들기 준비는 끝이 났습니다. 이제부터 할 일은 data 폴더 내의 SiteConfig.js 파일을 본인의 취향에 맞게끔 수정해 나가면 됩니다. 자세한 설정은 &lt;a href=&quot;https://github.com/haysclark/gatsby-starter-casper&quot;&gt;Ghost 테마 스타터&lt;/a&gt; 의 SiteConfig 설정을 참고하면 쉽게 변경하실 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;github-에-블로그-배포하기&quot;&gt;&lt;a href=&quot;#github-%EC%97%90-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Github 에 블로그 배포하기&lt;/h3&gt;
&lt;p&gt;이제 Github 에 배포하는 방법은 간단합니다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. Gitlab 을 방문하여 로그인 한다.
2. New Repository 를 클릭하여 새로운 저장소를 생성한다.
3. 이때 저장소의 이름은 본인이 원하는 것으로 지정한다. (ex, blog)&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;위의 순서로 Repository 를 생성했다면 gatsby 를 통해 생성된 블로그 폴더로 이동하여 다음과 같이 명령을 수행합니다.
편의상 Github Repository 이름을 &lt;code class=&quot;language-text&quot;&gt;blog&lt;/code&gt; 로 정했다고 가정하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;git init
git remote add origin https://github.com/계정이름/blog.git&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;위와같이 remote repository 를 연결했다면 이제 자신의 블로그 코드를 에디터로 열고 package.json 파일의 scripts 구문에 다음의 내용을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;quot;deploy&amp;quot;: &amp;quot;gatsby build --prefix-paths &amp;amp;&amp;amp; gh-pages -d public&amp;quot;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;package.json 내의 scripts 구문은 다음과 같은 형태가 될 것입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;develop&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby develop&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;serve&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby serve&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby build&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;build:pp&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby build --prefix-paths&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;build:gh&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm run clean &amp;amp;&amp;amp; npm run build:pp &amp;amp;&amp;amp; gh-pages -d public&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;clean&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rm -rf .cache &amp;amp;&amp;amp; rm -rf public&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm run lint:js &amp;amp;&amp;amp; npm run lint:css &amp;amp;&amp;amp; npm run lint:md&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;lint:js&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eslint --ext .js,.jsx --ignore-pattern public --ignore-pattern static .&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;lint:css&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;stylelint --fix &apos;src/**/*.css&apos;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;lint:md&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;remark content/posts/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;write-good&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;write-good $(glob &apos;content/posts/**/*.md&apos;)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;format:js&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;prettier &apos;**/*.{js,jsx}&apos; --write&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;release&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;standard-version -a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;deploy&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby build --prefix-paths &amp;amp;&amp;amp; gh-pages -d public&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;이제 Github 내의 gh-pages 브랜치로 배포하기 위해 npm package 를 설치합니다. (이미 설치가 되어 있다면 다음 과정은 생략해도 됩니다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install --save-dev gh-pages&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;여기까지 문제없이 진행되었다면 아래의 명령으로 Github 에 배포를 진행합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;npm run deploy&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;위의 모든 과정이 정상적으로 수행이 되었다면 &lt;a href=&quot;https://%EA%B3%84%EC%A0%95%EB%AA%85.github.com/blog/&quot;&gt;https://계정명.github.com/blog/&lt;/a&gt; 에 본인이 생성한 블로그가 개설이 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;댓글-플러그인-붙이기&quot;&gt;&lt;a href=&quot;#%EB%8C%93%EA%B8%80-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EB%B6%99%EC%9D%B4%EA%B8%B0&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;댓글 플러그인 붙이기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/haysclark/gatsby-starter-casper&quot;&gt;Ghost 테마 스타터&lt;/a&gt; 에는 기본적으로 &lt;a href=&quot;https://help.disqus.com/&quot;&gt;disqus&lt;/a&gt; 댓글 플러그인이 연동되어 있습니다.
disqus 가입 이후 발급된 short name 을 data/SiteConfig.js 파일 내에 있는 &lt;code class=&quot;language-text&quot;&gt;disqusShortname&lt;/code&gt; 설정값에 입력하기만 하면 모든 포스트에는 disqus comment 플러그인이 삽입이 됩니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Heroku 환경에서 Sidekiq, Redis 이용하기]]></title><description><![CDATA[최근에 개인적으로  Heroku  Free Tier를 이용하여 App을 배포하는 경우가 생겼는데 Puma + Sidekiq + Redis 환경을 설정하는데 좀 삽질을 한 경험이 있어 정리하고자 한다. Gem…]]></description><link>https://wecanooo.github.io/story/heroku-환경에서-sidekiq-redis-이용하기</link><guid isPermaLink="false">https://wecanooo.github.io/story/heroku-환경에서-sidekiq-redis-이용하기</guid><category><![CDATA[sidekiq]]></category><category><![CDATA[redis]]></category><category><![CDATA[heroku]]></category><dc:creator><![CDATA[wecanooo]]></dc:creator><pubDate>Thu, 26 May 2016 20:12:00 GMT</pubDate><content:encoded>&lt;p&gt;최근에 개인적으로 &lt;a href=&quot;http://heroku.com/&quot;&gt;Heroku&lt;/a&gt; Free Tier를 이용하여 App을 배포하는 경우가 생겼는데 Puma + Sidekiq + Redis 환경을 설정하는데 좀 삽질을 한 경험이 있어 정리하고자 한다.&lt;/p&gt;
&lt;h3 id=&quot;gem-설정&quot;&gt;&lt;a href=&quot;#gem-%EC%84%A4%EC%A0%95&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gem 설정&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;gem &lt;span class=&quot;token string&quot;&gt;&apos;rails&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;4.2.6&apos;&lt;/span&gt;
gem &lt;span class=&quot;token string&quot;&gt;&apos;puma&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;~&gt; 2.15&apos;&lt;/span&gt;
gem &lt;span class=&quot;token string&quot;&gt;&apos;sidekiq&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;~&gt; 4.0&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;이전에 진행했었던 프로젝트에서는 puma 대신 unicorn을 이용했었는데, Heroku 환경에서는 puma가 default이고 최근 많이들 unicorn에서 puma로 넘어가는 추세인 것 같아 puma를 이용하기로 했다.&lt;/p&gt;
&lt;h3 id=&quot;프로그램-설정-및-heroku-설정&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EC%A0%95-%EB%B0%8F-heroku-%EC%84%A4%EC%A0%95&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로그램 설정 및 Heroku 설정&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# config/puma.rb&lt;/span&gt;

workers &lt;span class=&quot;token function&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;WEB_CONCURRENCY&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
threads_count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;MAX_THREADS&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
threads threads_count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; threads_count

preload_app&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;

rackup      &lt;span class=&quot;token constant&quot;&gt;DefaultRackup&lt;/span&gt;
port        &lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;PORT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;
environment &lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;RACK_ENV&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;

on_worker_boot &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# Worker specific setup for Rails 4.1+&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# See: https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server#on-worker-boot&lt;/span&gt;
  &lt;span class=&quot;token variable&quot;&gt;@sidekiq_pid&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;bundle exec sidekiq -c 2 -q default -q mailer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:Base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;establish_connection
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;puma가 시작될 때 sidekiq을 몇 가지 옵션과 함께 실행도로록 했다. queue는 default, mailer queue를 생성했다.
이제 heroku에서 web instance를 실행하기 위해 Procfile을 작성할 차례이다.&lt;/p&gt;
&lt;p&gt;예전에 unicorn 환경에서 배포를 할 때는 아래와 같이 web과 redis, worker를 별도로 돌렸었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Procfile with unicorn + nginx + ubuntu 14.04&lt;/span&gt;

web&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; rails s &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;b &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;
redis&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; redis&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;server
worker&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bundle exec sidekiq &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;C&lt;/span&gt; config&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;sidekiq&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;yml&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;지금은 Heroku에 배포할 것이기 때문에 redis-server는 Heroku redistogo add-on 으로 대체하고, sidekiq은 puma 시작 시 같이 실행하도록 할 것이기 때문에 Procfile은 좀 더 간단하게 유지할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Procfile with puma + heroku&lt;/span&gt;

web&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bundle exec puma &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;C&lt;/span&gt; config&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;puma&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rb&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;이제 위에서 말한 &lt;a href=&quot;https://elements.heroku.com/addons/redistogo&quot;&gt;redistogo&lt;/a&gt;를 설치하고 환경설정 값을 지정할 차례다.
터미널에서 아래의 명령을 실행하자. &lt;a href=&quot;https://toolbelt.heroku.com/&quot;&gt;Heroku Toolbelt&lt;/a&gt;는 이미 설치되어 있다고 가정한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ heroku addons:create redistogo
$ heroku config:set REDIS_PROVIDER=REDISTOGO_URL&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Heroku에 sidekiq + redis를 통해 ActiveJob을 돌릴 수 있는 준비는 되었고, ActiveJob Adapter를 sidekiq으로 지정하기 위해 ActiveJob Queue Adapter를 sidekiq으로 지정한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# config/application.rb&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:Application&lt;/span&gt;

  config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;active_job&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;queue_adapter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:sidekiq&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3 id=&quot;rails-코딩&quot;&gt;&lt;a href=&quot;#rails-%EC%BD%94%EB%94%A9&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rails 코딩&lt;/h3&gt;
&lt;p&gt;환영 메일을 보내기 위한 Mailer 생성&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ rails generator mailer UserMailer&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# app/mailer/user_mailer.rb&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserMailer&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ApplicationMailer&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;welcome_email&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; user
    mail to&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; subject&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;email.welcome.subject&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;empty&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;환영메일 전송을 백그라운드에서 처리하기 위해 ActiveJob 생성&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ rails generator job welcome_email --queue mailer&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# app/jobs/welcome_email_job.rb&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WelcomeEmailJob&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ActiveJob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:Base&lt;/span&gt;
  queue_as &lt;span class=&quot;token symbol&quot;&gt;:mailer&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user_id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; user_id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;UserMailer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;welcome_email&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;deliver_now &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; user
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;이제 최종적으로 회원가입을 통해 사용자가 생성되었을 경우 환영메일을 전송&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# app/models/user.rb&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:Base&lt;/span&gt;

  after_create &lt;span class=&quot;token symbol&quot;&gt;:process_after_create!&lt;/span&gt;

  private

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; process_after_create&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;access_token &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; generate_access_token
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; save&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# 환영메일 전송&lt;/span&gt;
        &lt;span class=&quot;token constant&quot;&gt;WelcomeEmailJob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;perform_later&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; generate_access_token
      loop &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
        token &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token delimiter tag&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token delimiter tag&quot;&gt;}&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token delimiter tag&quot;&gt;#{&lt;/span&gt;Devise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;friendly_token&lt;span class=&quot;token delimiter tag&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt; token &lt;span class=&quot;token keyword&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;access_token&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first
      &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;이메일을 비동기로 전송할 수 있는 방법은 위의 방법 외에도 더 좋은 방법들이 있을 수 있다.
개인적인 코딩 취향에 따라 작성하면 된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2016년 5월 TIOBE 순위]]></title><description><![CDATA[원문 :  http://www.tiobe.com/tiobe_index 2016년 5월 TIOBE Index 헤드라인 : 루비가 과거 루비의 가장 높은 순위와 같아지다. 루비가 현재 TIOBE Index에서…]]></description><link>https://wecanooo.github.io/story/2016-년-5-월-tiobe-순위</link><guid isPermaLink="false">https://wecanooo.github.io/story/2016-년-5-월-tiobe-순위</guid><category><![CDATA[ruby]]></category><category><![CDATA[rank]]></category><dc:creator><![CDATA[wecanooo]]></dc:creator><pubDate>Thu, 12 May 2016 08:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/tiobe.png&quot; alt=&quot;TIOBE Index&quot;&gt;&lt;/p&gt;
&lt;p&gt;원문 : &lt;a href=&quot;http://www.tiobe.com/tiobe_index&quot;&gt;http://www.tiobe.com/tiobe_index&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2016년-5월-tiobe-index&quot;&gt;&lt;a href=&quot;#2016%EB%85%84-5%EC%9B%94-tiobe-index&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2016년 5월 TIOBE Index&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;헤드라인 : 루비가 과거 루비의 가장 높은 순위와 같아지다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;루비가 현재 TIOBE Index에서 8위에 위치하였습니다. 이것은 루비가 과거 2008년 12월에 차지했었던 가장 높은 순위와 같습니다.
루비의 이런 두번째 인기는 첫번째의 인기와는 다소 상반된 부분이 있습니다. 2006년 루비 전도사들은 루비가 가장 높은 순위가 될 것이라고 외치고 있었고 이는 별다른 의심의 여지가 없었습니다. 루비와 루비를 이용한 웹개발 환경인 레일즈는 성공적으로 영향력을 확대해 나가며 거의 세계를 정복해 나가고 있었습니다.
루비는 빠듯한 일정을 소화해야 하는 스타트업 업체들에 사랑받는 언어가 되었고, &lt;strong&gt;&quot;2006년의 프로그래밍 언어&quot;&lt;/strong&gt; 로 선정되기도 하였으며 그 인기는 2008년 말까지도 이어졌습니다.&lt;/p&gt;
&lt;p&gt;하지만 이때부터 많은 데이터를 처리해야 할 경우 성능이 떨어지는 것과 확정성이 문제로 대두되었고, 급기야 2010년 초에는 루비의 사용으로 유명하던 &lt;strong&gt;트위터&lt;/strong&gt; 가 이러한 문제로 인해 자바로 옮겨타기 시작했습니다. 루비 전도사들은 다른 쿨한 언어로 이동하면서 사라졌고 루비는 역사의 뒤안길로 사라지는 듯 했습니다.
하지만 그렇지 않았죠. 세상의 이목이 벗어난 곳에서 조용히 몇년을 보낸 뒤 &lt;strong&gt;2015년 초반부터 루비의 인기는 다시 증가&lt;/strong&gt; 하기 시작했습니다.
이제 루비는 예전처럼 그런 함성은 없지만 대신 실제로 사용되는 언어로써 지속적으로 성장할 수 있는 언어로 자리매김 한 것처럼 보입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/tiobe_2016.png&quot; alt=&quot;TIOBE Index - 2016 May&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/tiobe_2016_graph.png&quot; alt=&quot;TIOBE Graph - 2016 May&quot;&gt;&lt;/p&gt;
&lt;p&gt;해석에 문제가 있을 수 있으니 필요하면 원문을 직접 보시는 것을 추천합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Github와 Jekyll을 이용한 무료 블로그 만들기 - 4]]></title><description><![CDATA[이번 에피소드에서는 custom domain을 Github Pages에 적용하여 username.github.io 형태의 URL을 yourdomain.com 형태로 변경하는 방법에 대해서 알아본다. 꼭 Custom Domain…]]></description><link>https://wecanooo.github.io/story/github와-jekyll을-이용한-무료-블로그-만들기-4</link><guid isPermaLink="false">https://wecanooo.github.io/story/github와-jekyll을-이용한-무료-블로그-만들기-4</guid><category><![CDATA[blog]]></category><category><![CDATA[jekyll]]></category><category><![CDATA[github]]></category><dc:creator><![CDATA[wecanooo]]></dc:creator><pubDate>Sun, 01 May 2016 10:18:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/custom-domain-to-github.jpg&quot; alt=&quot;Github Custom Domain&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번 에피소드에서는 custom domain을 Github Pages에 적용하여 username.github.io 형태의 URL을 yourdomain.com 형태로 변경하는 방법에 대해서 알아본다.&lt;/p&gt;
&lt;h3 id=&quot;꼭-custom-domain을-적용해야-하나&quot;&gt;&lt;a href=&quot;#%EA%BC%AD-custom-domain%EC%9D%84-%EC%A0%81%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%82%98&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;꼭 Custom Domain을 적용해야 하나?&lt;/h3&gt;
&lt;p&gt;username.github.io 형태의 URL이 나쁜 것은 아니다. 하지만 나만의 URL을 적용함으로써 내가 제공하고자 하는 제품이나 서비스의 성격을 더욱 명확히 할 수 있고 SEO 측면에서도 상당히 중요하게 적용될 수 있다.&lt;/p&gt;
&lt;p&gt;요즘은 도메인을 구매하는데 큰 비용이 들어가는 것도 아니고, 프로모션도 이따금씩 하니 나만의 도메인을 하나쯤 갖는 것도 좋을 것이다.&lt;/p&gt;
&lt;h3 id=&quot;custom-domain-적용하기&quot;&gt;&lt;a href=&quot;#custom-domain-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom Domain 적용하기&lt;/h3&gt;
&lt;p&gt;도메인을 구매했다면 Custom Domain을 적용하는 것은 아래의 순서로 아주 간단하게 적용할 수 있다.
도메인 설정에 있어 필요한 DNS Record 관리는 도메인을 어디에서 구매했으냐에 따라 다소 화면이 다를 수 있다. 이 에피소드에서는 &lt;a href=&quot;https://kr.godaddy.com/&quot;&gt;Godaddy&lt;/a&gt; 기준으로 설명한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://wecanooo.github.io/blog/github-pages/&quot;&gt;이전 에피소드&lt;/a&gt;에서 만든 Github 저장소를 방문한 뒤 &lt;strong&gt;New File&lt;/strong&gt; 을 클릭하여 &lt;strong&gt;CNAME&lt;/strong&gt; 이라는 이름의 파일을 만든다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNAME&lt;/strong&gt; 파일의 내용에 구매한 도메인을 입력한다. 예를들어, &lt;strong&gt;yourdomain.com&lt;/strong&gt; 형태로 입력한다.&lt;/li&gt;
&lt;li&gt;만약 &lt;strong&gt;subdomain&lt;/strong&gt; 을 적용하고 싶다면 &lt;strong&gt;subdomain.yourdomain.com&lt;/strong&gt; 형태로 입력을 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNAME&lt;/strong&gt; 파일을 제대로 생성했다면, 이제 도메인 관리를 위해 도메인을 구매한 사이트로 이동하여 DNS Record 설정을 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS 관리&lt;/strong&gt; 항목에서 새로운 Record를 추가한다.&lt;/li&gt;
&lt;li&gt;Record의 유형은 &apos;A&apos;, 호스트는 &apos;@&apos;, 지시방향은 &apos;192.30.252.153&apos;로 지정하여 Record를 생성한다. (만약, &lt;strong&gt;subdomain&lt;/strong&gt; 을 적용하고자 한다면 호스트 입력란에 &lt;strong&gt;subdomain&lt;/strong&gt; 명을 입력한다.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/cname.png&quot; alt=&quot;CNAME 파일 생성&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/dns_management.png&quot; alt=&quot;DNS 관리&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/add_record.png&quot; alt=&quot;레코드 추가&quot;&gt;&lt;/p&gt;
&lt;p&gt;위와 같이 도메인 관리 화면에서 새로운 Record를 추가하면 Custom Domain을 적용하기 위한 작업은 모두 끝났다.
DNS의 변경이기 때문에 바로 적용될 수도 있고, 때에 따라서는 변경까지 시간이 걸릴 수도 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Github와 Jekyll을 이용한 무료 블로그 만들기 - 3]]></title><description><![CDATA[이전 에피소드 에서 우리는 Github Page Generator를 이용하여  UserName .github.io…]]></description><link>https://wecanooo.github.io/story/github와-jekyll을-이용한-무료-블로그-만들기-3</link><guid isPermaLink="false">https://wecanooo.github.io/story/github와-jekyll을-이용한-무료-블로그-만들기-3</guid><category><![CDATA[blog]]></category><category><![CDATA[jekyll]]></category><category><![CDATA[github]]></category><dc:creator><![CDATA[wecanooo]]></dc:creator><pubDate>Sat, 30 Apr 2016 10:18:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/jekyll_github.png&quot; alt=&quot;Jekyll and Github Pages&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://wecanooo.github.io/blog/github-pages/&quot;&gt;이전 에피소드&lt;/a&gt;에서 우리는 Github Page Generator를 이용하여 &lt;strong&gt;[UserName].github.io&lt;/strong&gt; 라는 이름의 사이트를 갖게 되었다.
그런데, 이렇게 만들어진 사이트는 기본 정보만 가지고 있는 소개 페이지 정도여서 블로그로 사용하기에는 적합하지 않다. 따라서, 우리는 &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll Theme&lt;/a&gt;를 이용하여 이미 만들어진 사이트를 블로그처럼 만들 필요가 있다.&lt;/p&gt;
&lt;h3 id=&quot;git-clone을-통해-소스-내려받기&quot;&gt;&lt;a href=&quot;#git-clone%EC%9D%84-%ED%86%B5%ED%95%B4-%EC%86%8C%EC%8A%A4-%EB%82%B4%EB%A0%A4%EB%B0%9B%EA%B8%B0&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git Clone을 통해 소스 내려받기&lt;/h3&gt;
&lt;p&gt;Jekyll Theme를 다운로드 받기 전에 &lt;code class=&quot;language-text&quot;&gt;git clone&lt;/code&gt; 명령을 통해 이전 에피소드에서 만들었던 저장소를 로컬 컴퓨터로 내려 받도록 하겠다. 저장소의 경로는 각자의 경로가 모두 다르기 때문에 본인의 저장소 경로를 확인하여야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ git clone https://github.com/haassl/haassl.github.io.git&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;위의 명령을 수행하면 &lt;code class=&quot;language-text&quot;&gt;haassl.github.io&lt;/code&gt; 폴더가 생성이 된다. 해당 폴더 내에는 이전 에피소드에서 생성되었던 파일들이 존재하는 것을 확인할 수 있다. 이제 이 폴더에 Jekyll Theme 파일을 적용하기 위해 &lt;code class=&quot;language-text&quot;&gt;haassl.github.io&lt;/code&gt; 폴더 내의 모든 파일은 삭제하도록 한다.&lt;/p&gt;
&lt;h3 id=&quot;jekyll-theme-다운로드-받기&quot;&gt;&lt;a href=&quot;#jekyll-theme-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-%EB%B0%9B%EA%B8%B0&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jekyll Theme 다운로드 받기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll Theme&lt;/a&gt; 사이트로 이동하면 많은 Theme 가 존재한다. 지금 글이 작성되고 있는 이 블로그도 Github Page와 Jekyll Theme를 이용한 블로그인데 편의상 같은 Theme를 다운로드 받아서 만들어 보겠다.&lt;/p&gt;
&lt;p&gt;Jekyll Theme 중 &lt;a href=&quot;http://jekyllthemes.org/themes/moon/&quot;&gt;Moon Theme&lt;/a&gt; 를 선택하고 Download 버튼을 클릭하여 Moon-gh-pages.zip 파일을 다운로드 받은 뒤 압축을 풀어 &lt;code class=&quot;language-text&quot;&gt;Moon-gh-pages&lt;/code&gt; 폴더 내에 있는 모든 파일을 위에서 생성한 &lt;code class=&quot;language-text&quot;&gt;haassl.github.io&lt;/code&gt; 내로 복사한다.&lt;/p&gt;
&lt;h3 id=&quot;jekyll-설치하기&quot;&gt;&lt;a href=&quot;#jekyll-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jekyll 설치하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://jekyllrb-ko.github.io/&quot;&gt;Jekyll&lt;/a&gt;은 정적파일을 블로그나 웹사이트로 제작할 수 있도록 하는 강력한 도구이다.
Jekyll에 대한 안내는 사이트에서 자세하게 안내하고 있으니 참고하기 바란다. Mac 에서 Jekyll 설치는 아주 간단하게 설치가 가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ gem install jekyll&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Jekyll을 설치한 뒤 화면을 확인하기 위해서는 작업경로로 이동한 뒤 아래의 명령을 수행하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ jekyll serve -w&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;이제 &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt; 에서 화면을 확인할 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;jekyll-theme-서버에-적용하기&quot;&gt;&lt;a href=&quot;#jekyll-theme-%EC%84%9C%EB%B2%84%EC%97%90-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jekyll Theme 서버에 적용하기&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ git add --all
$ git commit -m &amp;quot;Initial Commit&amp;quot;
$ git push origin master&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Github의 계정을 물어보면 계정정보를 입력하여 서버로 Theme를 올린다.&lt;/p&gt;
&lt;p&gt;이제 &lt;strong&gt;[UserName].github.io&lt;/strong&gt; 를 방문해 보면 변경된 Theme가 적용된 것을 확인할 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;안내영상&quot;&gt;&lt;a href=&quot;#%EC%95%88%EB%82%B4%EC%98%81%EC%83%81&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;안내영상&lt;/h3&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 75%; position: relative; height: 0; overflow: hidden;&quot;
          &gt;
            &lt;iframe src=&quot;//www.youtube.com/embed/H5h4s7b6XcU&quot; frameborder=&quot;0&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;</content:encoded></item><item><title><![CDATA[Github와 Jekyll을 이용한 무료 블로그 만들기 - 2]]></title><description><![CDATA[Github Pages를 이용하는 방법에는 크게 두가지가 있다. Github 계정 페이지 Github 프로젝트 페이지 Github 계정 페이지의 경우 Github에서 Repository를 생성할 때  AccountName .github.io…]]></description><link>https://wecanooo.github.io/story/github와-jekyll을-이용한-무료-블로그-만들기-2</link><guid isPermaLink="false">https://wecanooo.github.io/story/github와-jekyll을-이용한-무료-블로그-만들기-2</guid><category><![CDATA[blog]]></category><category><![CDATA[jekyll]]></category><category><![CDATA[github]]></category><dc:creator><![CDATA[wecanooo]]></dc:creator><pubDate>Fri, 29 Apr 2016 10:18:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/github-pages.jpg&quot; alt=&quot;Github Pages&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Github Pages를 이용하는 방법에는 크게 두가지가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github 계정 페이지&lt;/li&gt;
&lt;li&gt;Github 프로젝트 페이지&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Github 계정 페이지의 경우 Github에서 Repository를 생성할 때 &lt;strong&gt;[AccountName]&lt;/strong&gt;.github.io 형태로 만들면 된다. &lt;strong&gt;[AccountName]&lt;/strong&gt; 에는 반드시 자신의 계정명을 입력해야 하니 유의하기 바란다.&lt;/p&gt;
&lt;p&gt;Github 프로젝트 페이지의 경우 보통의 Repository를 만드는 것과 마찬가지로, 원하는 이름의 Repository를 생성한 뒤 생성된 저장소에 &lt;strong&gt;gh-pages&lt;/strong&gt; 라는 이름의 Branch를 만들면 Github에서 이 것을 Github Pages로 인식한다. 이후 &lt;strong&gt;gh-pages&lt;/strong&gt; Branch에 코드들을 넣으면 자신이 원하는 페이지를 제작할 수 있다.&lt;/p&gt;
&lt;p&gt;이번 에피소드에서는 Github 계정 페이지 제작 방식으로 진행한다. 자세한 내용을 알고 싶으면 &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;를 참조하길 바란다.&lt;/p&gt;
&lt;h3 id=&quot;github-저장소-생성하기&quot;&gt;&lt;a href=&quot;#github-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Github 저장소 생성하기&lt;/h3&gt;
&lt;p&gt;Github 계정이 있고 로그인이 완료된 상태라면 &lt;a href=&quot;https://github.com/new&quot;&gt;New Repository&lt;/a&gt;를 클릭하여
저장소 생성화면으로 이동한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/user-repo@2x.png&quot; alt=&quot;Create New User Repository&quot;&gt;&lt;/p&gt;
&lt;p&gt;Repository Name은 위에서 말한 것처럼 반드시 자신의 &lt;strong&gt;[AccountName]&lt;/strong&gt;.github.io 형태로 입력을 해야 한다. 그렇지 않을 경우, 정상적으로 동작하지 않을 수 있으니 유의하기 바란다.&lt;/p&gt;
&lt;p&gt;Github는 정책적으로 Private Repository를 유료로 지정하고 있기 때문에 우리는 Public Repository로 생성하도록 한다. 아래의 &quot;Initialize this repository with a README&quot;은 Repository를 생성할 때 README 파일을 함께 생성할 것인지를 물어보는 것으로 체크를 하면 최초에 README 파일을 함께 생성해 준다. 체크를 하고 가도록 하겠다. &lt;strong&gt;Create Repository&lt;/strong&gt; 버튼을 클릭하면 다음 화면으로 진행할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/created_repository.png&quot; alt=&quot;Repository Settings&quot;&gt;&lt;/p&gt;
&lt;p&gt;저장소가 정상적으로 생성이 되었다면 Github Pages로 만들기 위해 상단 Tab 중 &lt;strong&gt;[Settings]&lt;/strong&gt; 탭을 눌러 Settings 화면으로 이동한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/auto_generator.png&quot; alt=&quot;Auto Generator&quot;&gt;&lt;/p&gt;
&lt;p&gt;Settings 화면에서 마우스를 아래로 좀 내려보면 &lt;strong&gt;[Github Pages]&lt;/strong&gt; 항목이 보이고 &lt;strong&gt;[Launch automatic page generator]&lt;/strong&gt; 버튼이 보이면 클릭해 준다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/continue.png&quot; alt=&quot;Continue&quot;&gt;&lt;/p&gt;
&lt;p&gt;최종화면에서 Page Name과 Tagline에 적당한 값을 입력한 뒤 &lt;strong&gt;[Continue to layouts]&lt;/strong&gt; 버튼을 클릭하고 Layout은 기본 Layout을 선택한 뒤 완료한다.
Layout을 기본 Layout으로 선택하는 이유는 다음 에피소드에서 &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll theme&lt;/a&gt;를 이용하여 외부 Theme를 적용할 것이 때문이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/done.png&quot; alt=&quot;Continue&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;안내영상&quot;&gt;&lt;a href=&quot;#%EC%95%88%EB%82%B4%EC%98%81%EC%83%81&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;안내영상&lt;/h3&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 75%; position: relative; height: 0; overflow: hidden;&quot;
          &gt;
            &lt;iframe src=&quot;//www.youtube.com/embed/eVc3S5wk18o&quot; frameborder=&quot;0&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;여기까지 완료한 뒤 &lt;strong&gt;[AccountName]&lt;/strong&gt;.github.io 을 입력하면 Github 저장소에 호스팅 되는 자신의 페이지를 확인할 수 있다. 다음 에피소드에서 Jekyll Theme 중 적당한 것을 하나 선택하여 블로그를 꾸며보도록 하겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Github와 Jekyll을 이용한 무료 블로그 만들기 - 1]]></title><description><![CDATA[ 이번 에피소드에서는  Github Pages 의 기능을 이용하여 간단한 블로그를 제작하는 방법을 알아보고자 한다. 많은 사람들이 블로그를 운영하기 위해서  Wordpress 를 사용하고 있고, Wordpress는 상당히 훌륭한 CMS…]]></description><link>https://wecanooo.github.io/story/github와-jekyll을-이용한-무료-블로그-만들기-1</link><guid isPermaLink="false">https://wecanooo.github.io/story/github와-jekyll을-이용한-무료-블로그-만들기-1</guid><category><![CDATA[blog]]></category><category><![CDATA[jekyll]]></category><category><![CDATA[github]]></category><dc:creator><![CDATA[wecanooo]]></dc:creator><pubDate>Fri, 29 Apr 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://wecanooo.github.io/blog/assets/images/jekyll_github.png&quot; alt=&quot;Jekyll and Github Pages&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt; 이번 에피소드에서는 &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;의 기능을 이용하여 간단한 블로그를 제작하는 방법을 알아보고자 한다. 많은 사람들이 블로그를 운영하기 위해서 &lt;a href=&quot;https://wordpress.org/&quot;&gt;Wordpress&lt;/a&gt;를 사용하고 있고, Wordpress는 상당히 훌륭한 CMS 툴임에는 분명하다. 이 글은 Wordpress가 나쁘고 Github Pages를 좋다고 얘기하고자 하는 것은 아님을 밝혀둔다.&lt;/p&gt;
&lt;p&gt; Wordpress는 상당히 강력한 기능들과 더불어 많은 Plugin이 존재하여 많은 사람들이 사용하고 있지만 &lt;a href=&quot;https://wordpress.org/hosting/&quot;&gt;Hosting 방식으로 Wordpress를 운영&lt;/a&gt;할 것이 아니라면 모듈을 다운로드 받아 설치하는 방식으로 진행된다.&lt;/p&gt;
&lt;p&gt; 그러다보니, Wordpress를 운영하기 위한 서버가 반드시 필요하게 되고 이는 금전적, 기술적 부담으로 다가오게 된다. 그래서, 이번 에피소드에서는 서버 필요없이, 모듈 설치 필요없이, 누구나 쉽게 자신만의 블로그를 운영할 수 있는 방법을 다뤄보고자 한다.&lt;/p&gt;
&lt;h3 id=&quot;이번-에피소드에서-다룰-것들&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EB%B2%88-%EC%97%90%ED%94%BC%EC%86%8C%EB%93%9C%EC%97%90%EC%84%9C-%EB%8B%A4%EB%A3%B0-%EA%B2%83%EB%93%A4&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이번 에피소드에서 다룰 것들&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wecanooo.github.io/blog/github-pages/&quot;&gt;Github Pages Generator를 이용하여 계정페이지 제작하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wecanooo.github.io/blog/github-pages-with-theme/&quot;&gt;Jekyll 설치 및 Jekyll Theme 적용&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wecanooo.github.io/blog/github-pages-cname/&quot;&gt;Custom Domain 적용으로 나만의 URL 갖기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이것들이 이번 에피소드에서 다룰 주제이다. 위에 나열된 용어들이 다소 어렵게 느껴지더라도 미리 걱정하지 말자.
차근차근 진행하다 보면 어렵지 않게 목표에 도달할 수 있을 것이다.&lt;/p&gt;
&lt;h3 id=&quot;미리-알려둘-사항&quot;&gt;&lt;a href=&quot;#%EB%AF%B8%EB%A6%AC-%EC%95%8C%EB%A0%A4%EB%91%98-%EC%82%AC%ED%95%AD&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;미리 알려둘 사항&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이 에피소드에서 진행되는 모든 예제의 환경은 Mac 환경임을 알려둔다.&lt;/li&gt;
&lt;li&gt;Github 계정은 생성했다고 가정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아무쪼록 이번 에피소드를 통해 많은 분들이 자신만의 블로그를 가질 수 있기를 바란다.&lt;/p&gt;</content:encoded></item></channel></rss>