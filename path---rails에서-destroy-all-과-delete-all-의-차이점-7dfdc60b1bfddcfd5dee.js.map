{"version":3,"sources":["webpack:///path---rails에서-destroy-all-과-delete-all-의-차이점-7dfdc60b1bfddcfd5dee.js","webpack:///./.cache/json/rails에서-destroy-all-과-delete-all-의-차이점.json"],"names":["webpackJsonp","492","module","exports","data","markdownRemark","html","timeToRead","excerpt","frontmatter","title","cover","date","category","tags","author","fields","slug","prev","next","authors","edges","node","id","name","image","url","bio","pathContext","total"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,olLAAsiHC,WAAA,EAAAC,QAAA,iHAAAC,aAAw4EC,MAAA,yCAAAC,MAAA,sGAAAC,KAAA,2BAAAC,SAAA,OAAAC,MAAA,+DAAAC,OAAA,YAA8SC,QAAWC,KAAA,4CAAkDC,MAASV,QAAA,qGAAAC,aAA8HC,MAAA,qCAAAC,MAAA,sGAAAC,KAAA,cAA+KI,QAAWC,KAAA,sCAA4CE,MAASX,QAAA,0CAAAC,aAAmEC,MAAA,qBAAAC,MAAA,uGAAAC,KAAA,4BAA8KI,QAAWC,KAAA,wBAA8BG,SAAYC,QAAUC,MAAQC,GAAA,YAAAC,KAAA,mBAAAC,MAAA,mDAAAC,IAAA,wCAAAC,IAAA,4LAAsVL,MAAQC,GAAA,WAAAC,KAAA,YAAAC,MAAA,+DAAAC,IAAA,2BAAAC,IAAA,oCAAqLL,MAAQC,GAAA,SAAAC,KAAA,cAAAC,MAAA,+CAAAC,IAAA,uBAAAC,IAAA,2PAAuXC,aAAgBX,KAAA,0CAAAY,MAAA,GAAAX,KAAA,oCAAAC,KAAA","file":"path---rails에서-destroy-all-과-delete-all-의-차이점-7dfdc60b1bfddcfd5dee.js","sourcesContent":["webpackJsonp([176615095334334],{\n\n/***/ 492:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><img src=\\\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/933d63f9d5497e8d3c5c9330befe31f8/maxresdefault.jpg\\\" alt=\\\"Destroy\\\"></p>\\n<p>Rails 에서 <code class=\\\"language-text\\\">destroy_all</code> 과 <code class=\\\"language-text\\\">delete_all</code> 은 어떤 차이점이 있을까요?</p>\\n<p>Model 과 Model 간의 has<em>many 관계에서 `dependent: :destroy</em>all<code class=\\\"language-text\\\">과</code>dependent: :delete_all` 을 설정했을 경우 아래와 같은 형태로 동작을 하게 됩니다.</p>\\n<hr>\\n<h3 id=\\\"dependent-destroy_all\\\"><a href=\\\"#dependent-destroy_all\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>dependent: :destroy_all</h3>\\n<p>예를들어, Blog 모델은 여러개의 Post 모델을 가지고 있는 경우를 생각해 봅시다. 이런 경우 각각의 모델은 다음과 같은 형태의 구조를 가지게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Blog</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">ActiveRecord</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token symbol\\\">:Base</span>\\n  has_many <span class=\\\"token symbol\\\">:posts</span><span class=\\\"token punctuation\\\">,</span> dependent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token symbol\\\">:destroy_all</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Post</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">ActiveRecord</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token symbol\\\">:Base</span>\\n  belongs_to <span class=\\\"token symbol\\\">:blog</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<p>위의 Blog 모델에서 <code class=\\\"language-text\\\">dependent: :destroy_all</code> 이 가지는 의미는 Blog 인스턴스가 삭제될 때 해당 Blog 에 속해 있는 Post 개체를 인스턴스화 한 뒤 <code class=\\\"language-text\\\">destroy</code> 함수를 호출하게 됩니다. 즉, Post 개체가 삭제될 때 연결된 filter 나 callback 함수들이 수행되게 됩니다. 이는 실제 서비스에서 아주 유용하게 사용하게 되며, destroy 에 관련된 filter 또는 callback 에서 추가적인 처리가 필요할 경우에 아주 유용합니다.</p>\\n<h3 id=\\\"dependent-delete_all\\\"><a href=\\\"#dependent-delete_all\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>dependent: :delete_all</h3>\\n<p><code class=\\\"language-text\\\">delete_all</code> 설정은 조금은 다르게 동작합니다. 우선, 설정하는 방식은 위의 <code class=\\\"language-text\\\">destroy_all</code> 과 다를바가 별로 없습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Blog</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">ActiveRecord</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token symbol\\\">:Base</span>\\n  has_many <span class=\\\"token symbol\\\">:posts</span><span class=\\\"token punctuation\\\">,</span> dependent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token symbol\\\">:delete_all</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<p>하지만 <code class=\\\"language-text\\\">delete_all</code> 설정은 <code class=\\\"language-text\\\">destroy_all</code> 의 설정과 다르게 연결된 Post 모델을 인스턴스화 하여 해당 인스턴스의 <code class=\\\"language-text\\\">destroy</code> 함수를 호출하는 방식이 아니라, 연결된 Post 들의 ID 리스트를 SQL Delete 구문을 통해 삭제하는 방식으로 동작합니다. 즉, Blog 에 연결된 Post 는 삭제하지만 해당 Post 의 <code class=\\\"language-text\\\">destroy</code> 함수는 수행하지 않기 때문에 filter 나 callback 함수는 수행되지 않습니다. 만약, Post 모델이 삭제될 때 별도의 연결된 추가 처리를 할 이유가 없다면 delete_all 구문이 훨씬 효율적인 방법으로 동작하게 됩니다.</p>\\n<hr>\\n<h3 id=\\\"검토해볼만한-gem\\\"><a href=\\\"#%EA%B2%80%ED%86%A0%ED%95%B4%EB%B3%BC%EB%A7%8C%ED%95%9C-gem\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>검토해볼만한 Gem</h3>\\n<p>비록 Star 수는 많지는 않지만 <code class=\\\"language-text\\\">destroy_all</code> 과 <code class=\\\"language-text\\\">delete_all</code> 에 관련된 흥미로운 Gem 이 있어서 소개합니다.</p>\\n<p><a href=\\\"https://github.com/janosch-x/delete_recursively\\\">delete_recursively</a> 라는 Gem 은 Model 과 Model 간의 상관 관계를 확인하여 <code class=\\\"language-text\\\">:destroy_all</code> 과 <code class=\\\"language-text\\\">:delete_all</code> 중 어떤 것이 동작해야 하는지를 판단하여 수행하는 똑똑한 Gem 입니다.</p>\\n<p>또한, <code class=\\\"language-text\\\">destroy_all</code> 로 동작할 때도 삭제될 모델을 인스턴스화 하여 destroy 를 수행하는 것이 아니라 (인스턴스화 하여 삭제하게 되면 삭제할 갯수만큼 query 문이 발생됩니다.) <code class=\\\"language-text\\\">destroy_all</code> 과 <code class=\\\"language-text\\\">delete_all</code> 의 장점을 취합하여 사용하는 방식으로 동작합니다.</p>\\n<p>아직은 이 Gem 을 실무에서 사용해 본적이 없으나 곧 실무에서 적용해 볼 예정입니다.</p>\",\"timeToRead\":2,\"excerpt\":\"Rails 에서   과   은 어떤 차이점이 있을까요? Model 과 Model 간의 has many 관계에서 `dependent: :destroy all dependent: :delete_all…\",\"frontmatter\":{\"title\":\"Rails에서 destroy_all 과 delete_all 의 차이점\",\"cover\":\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/87836b5eb053590be9fc6d495e7858fc/cover6.jpg\",\"date\":\"2019-01-10T21:12:00.000Z\",\"category\":\"tech\",\"tags\":[\"rails\",\"destroy_all\",\"delete_all\",\"delete_recursively\",\"gem\"],\"author\":\"wecanooo\"},\"fields\":{\"slug\":\"/rails에서-destroy-all-과-delete-all-의-차이점\"}},\"prev\":{\"excerpt\":\" 이번 에피소드에서는  Github Pages 의 기능을 이용하여 간단한 블로그를 제작하는 방법을 알아보고자 한다. 많은 사람들이 블로그를 운영하기 위해서  Wordpress…\",\"frontmatter\":{\"title\":\"Github와 Jekyll을 이용한 무료 블로그 만들기 - 1\",\"cover\":\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/87836b5eb053590be9fc6d495e7858fc/cover7.jpg\",\"date\":\"2016-04-29\"},\"fields\":{\"slug\":\"/github와-jekyll을-이용한-무료-블로그-만들기-1\"}},\"next\":{\"excerpt\":\"인프라스트럭쳐 모니터링(Infrastructure Monitoring…\",\"frontmatter\":{\"title\":\"New Relic 서비스 연동하기\",\"cover\":\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/b5a3f174d257be33bbbc1e6e7f787f6a/cover11.png\",\"date\":\"2019-01-09T16:37:00.000Z\"},\"fields\":{\"slug\":\"/new-relic-서비스-연동하기\"}},\"authors\":{\"edges\":[{\"node\":{\"id\":\"guinevere\",\"name\":\"Guinevere Kuiper\",\"image\":\"https://randomuser.me/api/portraits/women/17.jpg\",\"url\":\"https://randomuser.me/api/?seed=user1\",\"bio\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam laoreet lorem nec ligula aliquet, porta blandit augue luctus. Vivamus ac quam diam. Sed vestibulum pharetra hendrerit.\"}},{\"node\":{\"id\":\"wecanooo\",\"name\":\"Eric Jang\",\"image\":\"https://api.adorable.io/avatars/150/wecanooo@adorable.io.png\",\"url\":\"http://about.me/wecanooo\",\"bio\":\"루비온레일즈를 좋아하고, 여행을 좋아하는 개발자입니다.\"}},{\"node\":{\"id\":\"casper\",\"name\":\"Casper User\",\"image\":\"https://api.adorable.io/avatars/150/test.png\",\"url\":\"http://gatsbyjs.org/\",\"bio\":\"Yeah, I like animals better than people sometimes... Especially dogs. Dogs are the best. Every time you come home, they act like they haven't seen you in a year. And the good thing about dogs... is they got different dogs for different people.\"}}]}},\"pathContext\":{\"slug\":\"/rails에서-destroy-all-과-delete-all-의-차이점\",\"total\":11,\"prev\":\"/github와-jekyll을-이용한-무료-블로그-만들기-1\",\"next\":\"/new-relic-서비스-연동하기\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---rails에서-destroy-all-과-delete-all-의-차이점-7dfdc60b1bfddcfd5dee.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><img src=\\\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/933d63f9d5497e8d3c5c9330befe31f8/maxresdefault.jpg\\\" alt=\\\"Destroy\\\"></p>\\n<p>Rails 에서 <code class=\\\"language-text\\\">destroy_all</code> 과 <code class=\\\"language-text\\\">delete_all</code> 은 어떤 차이점이 있을까요?</p>\\n<p>Model 과 Model 간의 has<em>many 관계에서 `dependent: :destroy</em>all<code class=\\\"language-text\\\">과</code>dependent: :delete_all` 을 설정했을 경우 아래와 같은 형태로 동작을 하게 됩니다.</p>\\n<hr>\\n<h3 id=\\\"dependent-destroy_all\\\"><a href=\\\"#dependent-destroy_all\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>dependent: :destroy_all</h3>\\n<p>예를들어, Blog 모델은 여러개의 Post 모델을 가지고 있는 경우를 생각해 봅시다. 이런 경우 각각의 모델은 다음과 같은 형태의 구조를 가지게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Blog</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">ActiveRecord</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token symbol\\\">:Base</span>\\n  has_many <span class=\\\"token symbol\\\">:posts</span><span class=\\\"token punctuation\\\">,</span> dependent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token symbol\\\">:destroy_all</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Post</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">ActiveRecord</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token symbol\\\">:Base</span>\\n  belongs_to <span class=\\\"token symbol\\\">:blog</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<p>위의 Blog 모델에서 <code class=\\\"language-text\\\">dependent: :destroy_all</code> 이 가지는 의미는 Blog 인스턴스가 삭제될 때 해당 Blog 에 속해 있는 Post 개체를 인스턴스화 한 뒤 <code class=\\\"language-text\\\">destroy</code> 함수를 호출하게 됩니다. 즉, Post 개체가 삭제될 때 연결된 filter 나 callback 함수들이 수행되게 됩니다. 이는 실제 서비스에서 아주 유용하게 사용하게 되며, destroy 에 관련된 filter 또는 callback 에서 추가적인 처리가 필요할 경우에 아주 유용합니다.</p>\\n<h3 id=\\\"dependent-delete_all\\\"><a href=\\\"#dependent-delete_all\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>dependent: :delete_all</h3>\\n<p><code class=\\\"language-text\\\">delete_all</code> 설정은 조금은 다르게 동작합니다. 우선, 설정하는 방식은 위의 <code class=\\\"language-text\\\">destroy_all</code> 과 다를바가 별로 없습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code class=\\\"language-ruby\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Blog</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">ActiveRecord</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token symbol\\\">:Base</span>\\n  has_many <span class=\\\"token symbol\\\">:posts</span><span class=\\\"token punctuation\\\">,</span> dependent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token symbol\\\">:delete_all</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre>\\n      </div>\\n<p>하지만 <code class=\\\"language-text\\\">delete_all</code> 설정은 <code class=\\\"language-text\\\">destroy_all</code> 의 설정과 다르게 연결된 Post 모델을 인스턴스화 하여 해당 인스턴스의 <code class=\\\"language-text\\\">destroy</code> 함수를 호출하는 방식이 아니라, 연결된 Post 들의 ID 리스트를 SQL Delete 구문을 통해 삭제하는 방식으로 동작합니다. 즉, Blog 에 연결된 Post 는 삭제하지만 해당 Post 의 <code class=\\\"language-text\\\">destroy</code> 함수는 수행하지 않기 때문에 filter 나 callback 함수는 수행되지 않습니다. 만약, Post 모델이 삭제될 때 별도의 연결된 추가 처리를 할 이유가 없다면 delete_all 구문이 훨씬 효율적인 방법으로 동작하게 됩니다.</p>\\n<hr>\\n<h3 id=\\\"검토해볼만한-gem\\\"><a href=\\\"#%EA%B2%80%ED%86%A0%ED%95%B4%EB%B3%BC%EB%A7%8C%ED%95%9C-gem\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>검토해볼만한 Gem</h3>\\n<p>비록 Star 수는 많지는 않지만 <code class=\\\"language-text\\\">destroy_all</code> 과 <code class=\\\"language-text\\\">delete_all</code> 에 관련된 흥미로운 Gem 이 있어서 소개합니다.</p>\\n<p><a href=\\\"https://github.com/janosch-x/delete_recursively\\\">delete_recursively</a> 라는 Gem 은 Model 과 Model 간의 상관 관계를 확인하여 <code class=\\\"language-text\\\">:destroy_all</code> 과 <code class=\\\"language-text\\\">:delete_all</code> 중 어떤 것이 동작해야 하는지를 판단하여 수행하는 똑똑한 Gem 입니다.</p>\\n<p>또한, <code class=\\\"language-text\\\">destroy_all</code> 로 동작할 때도 삭제될 모델을 인스턴스화 하여 destroy 를 수행하는 것이 아니라 (인스턴스화 하여 삭제하게 되면 삭제할 갯수만큼 query 문이 발생됩니다.) <code class=\\\"language-text\\\">destroy_all</code> 과 <code class=\\\"language-text\\\">delete_all</code> 의 장점을 취합하여 사용하는 방식으로 동작합니다.</p>\\n<p>아직은 이 Gem 을 실무에서 사용해 본적이 없으나 곧 실무에서 적용해 볼 예정입니다.</p>\",\"timeToRead\":2,\"excerpt\":\"Rails 에서   과   은 어떤 차이점이 있을까요? Model 과 Model 간의 has many 관계에서 `dependent: :destroy all dependent: :delete_all…\",\"frontmatter\":{\"title\":\"Rails에서 destroy_all 과 delete_all 의 차이점\",\"cover\":\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/87836b5eb053590be9fc6d495e7858fc/cover6.jpg\",\"date\":\"2019-01-10T21:12:00.000Z\",\"category\":\"tech\",\"tags\":[\"rails\",\"destroy_all\",\"delete_all\",\"delete_recursively\",\"gem\"],\"author\":\"wecanooo\"},\"fields\":{\"slug\":\"/rails에서-destroy-all-과-delete-all-의-차이점\"}},\"prev\":{\"excerpt\":\" 이번 에피소드에서는  Github Pages 의 기능을 이용하여 간단한 블로그를 제작하는 방법을 알아보고자 한다. 많은 사람들이 블로그를 운영하기 위해서  Wordpress…\",\"frontmatter\":{\"title\":\"Github와 Jekyll을 이용한 무료 블로그 만들기 - 1\",\"cover\":\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/87836b5eb053590be9fc6d495e7858fc/cover7.jpg\",\"date\":\"2016-04-29\"},\"fields\":{\"slug\":\"/github와-jekyll을-이용한-무료-블로그-만들기-1\"}},\"next\":{\"excerpt\":\"인프라스트럭쳐 모니터링(Infrastructure Monitoring…\",\"frontmatter\":{\"title\":\"New Relic 서비스 연동하기\",\"cover\":\"https://st-kr-tutor.s3-ap-northeast-2.amazonaws.com/got/b5a3f174d257be33bbbc1e6e7f787f6a/cover11.png\",\"date\":\"2019-01-09T16:37:00.000Z\"},\"fields\":{\"slug\":\"/new-relic-서비스-연동하기\"}},\"authors\":{\"edges\":[{\"node\":{\"id\":\"guinevere\",\"name\":\"Guinevere Kuiper\",\"image\":\"https://randomuser.me/api/portraits/women/17.jpg\",\"url\":\"https://randomuser.me/api/?seed=user1\",\"bio\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam laoreet lorem nec ligula aliquet, porta blandit augue luctus. Vivamus ac quam diam. Sed vestibulum pharetra hendrerit.\"}},{\"node\":{\"id\":\"wecanooo\",\"name\":\"Eric Jang\",\"image\":\"https://api.adorable.io/avatars/150/wecanooo@adorable.io.png\",\"url\":\"http://about.me/wecanooo\",\"bio\":\"루비온레일즈를 좋아하고, 여행을 좋아하는 개발자입니다.\"}},{\"node\":{\"id\":\"casper\",\"name\":\"Casper User\",\"image\":\"https://api.adorable.io/avatars/150/test.png\",\"url\":\"http://gatsbyjs.org/\",\"bio\":\"Yeah, I like animals better than people sometimes... Especially dogs. Dogs are the best. Every time you come home, they act like they haven't seen you in a year. And the good thing about dogs... is they got different dogs for different people.\"}}]}},\"pathContext\":{\"slug\":\"/rails에서-destroy-all-과-delete-all-의-차이점\",\"total\":11,\"prev\":\"/github와-jekyll을-이용한-무료-블로그-만들기-1\",\"next\":\"/new-relic-서비스-연동하기\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/rails에서-destroy-all-과-delete-all-의-차이점.json\n// module id = 492\n// module chunks = 176615095334334"],"sourceRoot":""}